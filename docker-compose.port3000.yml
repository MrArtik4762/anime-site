services:
  # React Frontend на порту 3000
  client:
    build: 
      context: ./client
      dockerfile: Dockerfile
    image: anime-site-client:latest
    container_name: anime-site-client-3000
    restart: unless-stopped
    ports:
      - "3000:80"  # Проброс порта 3000 на хост
    volumes:
      - ./client/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      - server
    networks:
      - anime-site-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Backend API
  server:
    build:
      context: .
      dockerfile: server/Dockerfile
      target: production
    image: anime-site-server:latest
    container_name: anime-site-server-3000
    restart: unless-stopped
    ports:
      - "5000:5000"  # Проброс порта для API
    volumes:
      - ./server/uploads:/app/uploads
      - server_logs:/app/logs
      - ./shared:/app/shared
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      - MONGODB_URI=mongodb://admin:${MONGO_PASSWORD:-password}@mongodb:27017/anime-site?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRE=${JWT_EXPIRE:-30d}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-refresh-token-secret-change-in-production}
      - JWT_REFRESH_EXPIRE=${JWT_REFRESH_EXPIRE:-7d}
      - CLIENT_URL=http://localhost:3000
      - SOCKET_CORS_ORIGIN=http://localhost:3000
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-5242880}
      - UPLOAD_PATH=/app/uploads
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-15}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
    init: true
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - anime-site-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: anime-site-mongodb-3000
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: anime-site
    command: ["mongod", "--bind_ip_all"]
    networks:
      - anime-site-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: anime-site-redis-3000
    restart: unless-stopped
    user: "root"
    ports:
      - "6379:6379"
    volumes:
      - ./logs/redis:/var/log/redis
      - redis_data:/data
    command: redis-server --appendonly yes --logfile /var/log/redis/redis.log
    networks:
      - anime-site-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AniCLI API Service
  anicli_api:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    image: anime-site-anicli:latest
    container_name: anime-site-anicli-3000
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - UVICORN_WORKERS=4
      - UVICORN_TIMEOUT=120
      - CACHE_TTL=3600
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - FASTAPI_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - anime-site-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

# Используемые тома для персистентных данных
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  server_logs:
    driver: local

# Сеть для изоляции сервисов
networks:
  anime-site-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16