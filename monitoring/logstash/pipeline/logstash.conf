input {
  # Beats input (Filebeat, Metricbeat, etc.)
  beats {
    port => 5044
  }

  # TCP input для прямых логов
  tcp {
    port => 5000
    codec => json_lines
  }

  # UDP input для высокопроизводительных логов
  udp {
    port => 5000
    codec => json_lines
  }

  # File input для логов из файлов
  file {
    path => "/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  # Парсинг JSON логов
  json {
    source => "message"
    target => "parsed"
  }

  # Удаление поля message, если данные уже в JSON
  if [parsed] {
    mutate {
      remove_field => [ "message" ]
    }
  }

  # Парсинг логов уровня
  if [level] {
    grok {
      match => { "level" => "(?<log_level>%{WORD:log_level})" }
    }
  }

  # Парсинг временных меток
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Добавление тегов на основе уровня логирования
  if [log_level] == "error" {
    mutate {
      add_tag => [ "error" ]
    }
  } else if [log_level] == "warn" {
    mutate {
      add_tag => [ "warning" ]
    }
  } else if [log_level] == "info" {
    mutate {
      add_tag => [ "info" ]
    }
  }

  # Парсинг HTTP запросов
  if [method] and [url] {
    mutate {
      add_field => {
        "http_request" => "%{method} %{url}"
      }
    }
  }

  # Парсинг ошибок
  if [error] {
    mutate {
      add_tag => [ "exception" ]
    }
  }

  # Добавление источника логирования
  if [service] {
    mutate {
      add_field => {
        "log_source" => "%{service}"
      }
    }
  }

  # Парсинг user agent
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "user_agent_parsed"
    }
  }

  # Парсинг IP адресов
  if [ip] {
    geoip {
      source => "ip"
      target => "geoip"
    }
  }

  # Добавление хоста
  mutate {
    add_field => {
      "host" => "%{host}"
    }
  }

  # Удаление полей с нулевыми значениями
  mutate {
    remove_field => [ "host", "agent", "ecs", "input", "log", "message", "tags" ]
  }
}

output {
  # Вывод в Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "anime-site-logs-%{+YYYY.MM.dd}"
    template_name => "anime-site-logs"
    template => "/usr/share/logstash/templates/anime-site-logs.json"
    template_overwrite => true
  }

  # Вывод в консоль для отладки
  stdout {
    codec => rubydebug {
      metadata => true
    }
  }

  # Вывод в файл для бэкапа
  file {
    path => "/backup/logs/%{+YYYY-MM-dd}.log"
    codec => line { format => "%{message}" }
  }
}