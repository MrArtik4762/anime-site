#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class READMEUpdater {
  constructor() {
    this.readmePath = path.join(__dirname, '../README.md');
    this.changelogPath = path.join(__dirname, '../CHANGELOG.md');
    this.tempReadmePath = path.join(__dirname, '../README_TEMP.md');
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  formatDate(date) {
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    }).format(date);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–∞—Ö
  getRecentCommits(limit = 5) {
    try {
      const command = `git log --oneline --format="%h %s" -n ${limit}`;
      const output = execSync(command, { encoding: 'utf8' }).trim();
      return output.split('\n').filter(line => line.trim());
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö:', error.message);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
  getProjectStats() {
    try {
      const stats = {};
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
      const filesCommand = 'git ls-files | wc -l';
      stats.files = parseInt(execSync(filesCommand, { encoding: 'utf8' }).trim());
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
      const linesCommand = 'git ls-files | xargs wc -l | tail -1 | awk \'{print $1}\'';
      stats.lines = parseInt(execSync(linesCommand, { encoding: 'utf8' }).trim());
      
      // –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      const sizeCommand = 'git count-objects -vH | grep "size-pack" | awk \'{print $2}\'';
      stats.size = parseInt(execSync(sizeCommand, { encoding: 'utf8' }).trim());
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
      const commitsCommand = 'git rev-list --count HEAD';
      stats.commits = parseInt(execSync(commitsCommand, { encoding: 'utf8' }).trim());
      
      return stats;
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
      return {
        files: 0,
        lines: 0,
        size: 0,
        commits: 0
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ package.json
  getCurrentVersion() {
    try {
      const packagePath = path.join(__dirname, '../package.json');
      const packageContent = fs.readFileSync(packagePath, 'utf8');
      const packageData = JSON.parse(packageContent);
      return packageData.version || '1.0.0';
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ package.json:', error.message);
      return '1.0.0';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–ù–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
  updateRecentUpdates() {
    const commits = this.getRecentCommits(5);
    const currentDate = this.formatDate(new Date());
    const version = this.getCurrentVersion();
    
    let updatesSection = `## üìÖ –ù–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n`;
    updatesSection += `### v${version} (${currentDate})\n`;
    
    if (commits.length > 0) {
      updatesSection += `- ‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n`;
      updatesSection += `- ‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Git** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:\n`;
      
      commits.forEach((commit, index) => {
        updatesSection += `  - ${commit}\n`;
      });
    } else {
      updatesSection += `- ‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏** - –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è README.md\n`;
    }
    
    updatesSection += `\n### –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è\n`;
    updatesSection += `README.md –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫—Ä—É–ø–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ.\n`;
    
    return updatesSection;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
  updateProjectStats() {
    const stats = this.getProjectStats();
    const sizeInMB = Math.round(stats.size / 1024 / 1024 * 100) / 100;
    
    let statsSection = `## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n`;
    statsSection += `- **–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞**: ${this.getCurrentVersion()}\n`;
    statsSection += `- **–§–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏**: ${stats.files.toLocaleString()}\n`;
    statsSection += `- **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞**: ${stats.lines.toLocaleString()}\n`;
    statsSection += `- **–†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è**: ~${sizeInMB} –ú–ë\n`;
    statsSection += `- **–í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤**: ${stats.commits.toLocaleString()}\n`;
    statsSection += `- **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: ${this.formatDate(new Date())}\n`;
    
    return statsSection;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é"
  updateStorageRequirements() {
    const stats = this.getProjectStats();
    const sizeInMB = Math.round(stats.size / 1024 / 1024 * 100) / 100;
    
    let requirementsSection = `### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é\n\n`;
    requirementsSection += `- **–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞**: ~${sizeInMB} –ú–ë\n`;
    requirementsSection += `- **–î–æ—Å—Ç—É–ø–Ω–æ–µ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ**: –º–∏–Ω–∏–º—É–º 2 –ì–ë –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n`;
    requirementsSection += `- **–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å**: –º–∏–Ω–∏–º—É–º 4 –ì–ë –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n`;
    
    return requirementsSection;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è README
  updateREADME() {
    try {
      console.log('–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md...');
      
      // –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ README
      const currentReadme = fs.readFileSync(this.readmePath, 'utf8');
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–µ–∫—Ü–∏–π
      const recentUpdates = this.updateRecentUpdates();
      const projectStats = this.updateProjectStats();
      const storageRequirements = this.updateStorageRequirements();
      
      // –ó–∞–º–µ–Ω–∞ —Å–µ–∫—Ü–∏–π –≤ README
      let updatedReadme = currentReadme;
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–ù–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
      const updatesStart = updatedReadme.indexOf('## üìÖ –ù–µ–¥–∞–≤–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      const updatesEnd = updatedReadme.indexOf('## üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫', updatesStart);
      if (updatesStart !== -1 && updatesEnd !== -1) {
        updatedReadme = updatedReadme.substring(0, updatesStart) + 
                       recentUpdates + '\n\n' + 
                       updatedReadme.substring(updatesEnd);
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é"
      const storageStart = updatedReadme.indexOf('### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é');
      const storageEnd = updatedReadme.indexOf('### –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏', storageStart);
      if (storageStart !== -1 && storageEnd !== -1) {
        updatedReadme = updatedReadme.substring(0, storageStart) + 
                       storageRequirements + '\n\n' + 
                       updatedReadme.substring(storageEnd);
      }
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
      if (!updatedReadme.includes('## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞')) {
        const techStackStart = updatedReadme.indexOf('## üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫');
        if (techStackStart !== -1) {
          updatedReadme = updatedReadme.substring(0, techStackStart) + 
                         projectStats + '\n\n' + 
                         updatedReadme.substring(techStackStart);
        }
      }
      
      // –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ README
      fs.writeFileSync(this.tempReadmePath, updatedReadme, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const originalContent = fs.readFileSync(this.readmePath, 'utf8');
      const newContent = fs.readFileSync(this.tempReadmePath, 'utf8');
      
      if (originalContent === newContent) {
        console.log('README.md –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
        fs.unlinkSync(this.tempReadmePath);
        return false;
      }
      
      // –ó–∞–º–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      fs.renameSync(this.tempReadmePath, this.readmePath);
      console.log('README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      return true;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ README.md:', error);
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å README
  needsUpdate() {
    try {
      const currentReadme = fs.readFileSync(this.readmePath, 'utf8');
      const lastUpdateMatch = currentReadme.match(/–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: (\d{2}\.\d{2}\.\d{4})/);
      
      if (!lastUpdateMatch) return true;
      
      const lastUpdate = new Date(lastUpdateMatch[1]);
      const today = new Date();
      const daysSinceUpdate = Math.floor((today - lastUpdate) / (1000 * 60 * 60 * 24));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 7 –¥–Ω–µ–π –∏–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã
      return daysSinceUpdate > 7;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return true;
    }
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const updater = new READMEUpdater();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (updater.needsUpdate()) {
    const updated = updater.updateREADME();
    if (updated) {
      console.log('‚úÖ README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      process.exit(0);
    } else {
      console.log('‚ÑπÔ∏è  README.md –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
      process.exit(0);
    }
  } else {
    console.log('‚ÑπÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md –ø–æ–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
    process.exit(0);
  }
}

module.exports = READMEUpdater;