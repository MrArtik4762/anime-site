#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ-—Å–∞–π—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/deploy.sh [dev|prod|monitoring]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env
check_env_file() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -f .env ]; then
        print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ .env.example..."
        cp .env.example .env
        print_warning "–í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º!"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    if [ "$1" = "prod" ]; then
        if grep -q "change-in-production" .env; then
            print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ .env!"
            print_error "–ò–∑–º–µ–Ω–∏—Ç–µ JWT_SECRET, MONGO_PASSWORD –∏ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ä–µ—Ç—ã!"
            exit 1
        fi
    fi
    
    print_success "–§–∞–π–ª .env –ø—Ä–æ–≤–µ—Ä–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p nginx/ssl
    mkdir -p server/uploads
    mkdir -p server/logs
    mkdir -p monitoring/grafana/provisioning
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
deploy_dev() {
    print_info "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
    
    docker compose -f docker-compose.dev.yml down
    docker compose -f docker-compose.dev.yml build
    docker compose -f docker-compose.dev.yml up -d
    
    print_success "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω!"
    print_info "Frontend: http://localhost:3000"
    print_info "Backend API: http://localhost:5000"
    print_info "MongoDB: localhost:27017"
    print_info "Redis: localhost:6379"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
deploy_prod() {
    print_info "–ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ..."
    
    docker compose down
    docker compose build --no-cache
    docker compose up -d
    
    print_success "–ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω!"
    print_info "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost"
    print_info "–î–ª—è HTTPS –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ nginx/ssl/"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
deploy_monitoring() {
    print_info "–ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º..."
    
    docker compose --profile monitoring down
    docker compose --profile monitoring build
    docker compose --profile monitoring up -d
    
    print_success "–†–µ–∂–∏–º —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–∞–ø—É—â–µ–Ω!"
    print_info "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost"
    print_info "Grafana: http://localhost:3001"
    print_info "Prometheus: http://localhost:9090"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health_check() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    sleep 10  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if curl -f http://localhost/health &> /dev/null; then
        print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_warning "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if curl -f http://localhost/api/health &> /dev/null; then
        print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_warning "API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker compose ps
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    print_info "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker compose logs -f --tail=50
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    docker compose down
    docker compose -f docker-compose.dev.yml down
    docker compose --profile monitoring down
    
    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
cleanup() {
    print_info "–û—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."
    
    docker system prune -f
    docker volume prune -f
    
    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üê≥ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ-—Å–∞–π—Ç–∞"
    echo "=================================="
    
    check_dependencies
    
    case "${1:-dev}" in
        "dev")
            check_env_file "dev"
            create_directories
            deploy_dev
            health_check
            ;;
        "prod")
            check_env_file "prod"
            create_directories
            deploy_prod
            health_check
            ;;
        "monitoring")
            check_env_file "prod"
            create_directories
            deploy_monitoring
            health_check
            ;;
        "logs")
            show_logs
            ;;
        "stop")
            stop_services
            ;;
        "cleanup")
            stop_services
            cleanup
            ;;
        "health")
            health_check
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [dev|prod|monitoring|logs|stop|cleanup|health]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  dev        - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
            echo "  prod       - –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ"
            echo "  monitoring - –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
            echo "  logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo "  stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
            echo "  cleanup    - –û—á–∏—Å—Ç–∏—Ç—å Docker —Å–∏—Å—Ç–µ–º—É"
            echo "  health     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"