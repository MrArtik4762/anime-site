#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class PrepareCommit {
  constructor() {
    this.readmePath = path.join(__dirname, '../README.md');
    this.changelogPath = path.join(__dirname, '../CHANGELOG.md');
    this.tempReadmePath = path.join(__dirname, '../README_TEMP.md');
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  formatDate(date) {
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    }).format(date);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ package.json
  getCurrentVersion() {
    try {
      const packagePath = path.join(__dirname, '../package.json');
      const packageContent = fs.readFileSync(packagePath, 'utf8');
      const packageData = JSON.parse(packageContent);
      return packageData.version || '1.0.0';
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ package.json:', error.message);
      return '1.0.0';
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  getChangedFiles() {
    try {
      const command = 'git diff --name-only HEAD';
      const output = execSync(command, { encoding: 'utf8' }).trim();
      return output ? output.split('\n') : [];
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error.message);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ README.md
  hasReadmeChanges() {
    const changedFiles = this.getChangedFiles();
    return changedFiles.includes('README.md');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–∞—Ö –¥–ª—è changelog
  getRecentCommitsForChangelog(limit = 3) {
    try {
      const command = `git log --oneline --format="%h %s" -n ${limit}`;
      const output = execSync(command, { encoding: 'utf8' }).trim();
      return output.split('\n').filter(line => line.trim());
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö:', error.message);
      return [];
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ changelog –∑–∞–ø–∏—Å–∏
  createChangelogEntry() {
    const commits = this.getRecentCommitsForChangelog(3);
    const currentDate = this.formatDate(new Date());
    const version = this.getCurrentVersion();
    
    let changelogEntry = `### v${version} (${currentDate})\n`;
    
    if (commits.length > 0) {
      changelogEntry += commits.map(commit => `- ${commit}`).join('\n');
    } else {
      changelogEntry += '- ‚úÖ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏** - –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è README.md';
    }
    
    return changelogEntry;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ changelog
  updateChangelog() {
    try {
      const changelogExists = fs.existsSync(this.changelogPath);
      
      if (!changelogExists) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ changelog
        const changelogContent = `# üìù Changelog\n\n${this.createChangelogEntry()}\n`;
        fs.writeFileSync(this.changelogPath, changelogContent, 'utf8');
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π CHANGELOG.md');
        return true;
      } else {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ changelog
        const currentChangelog = fs.readFileSync(this.changelogPath, 'utf8');
        const newEntry = this.createChangelogEntry();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        const versionRegex = new RegExp(`### v${this.getCurrentVersion()}\\s*\\(`);
        if (versionRegex.test(currentChangelog)) {
          console.log('‚ÑπÔ∏è  –ó–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ CHANGELOG.md');
          return false;
        }
        
        const updatedChangelog = `${newEntry}\n\n${currentChangelog}`;
        fs.writeFileSync(this.changelogPath, updatedChangelog, 'utf8');
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω CHANGELOG.md');
        return true;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ CHANGELOG.md:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã–º
  isMajorChange() {
    const changedFiles = this.getChangedFiles();
    const readmeChanged = changedFiles.includes('README.md');
    
    if (readmeChanged) {
      try {
        const readmeDiff = execSync('git diff HEAD~1 README.md', { encoding: 'utf8' });
        const linesAdded = (readmeDiff.match(/^\+/gm) || []).length;
        const linesRemoved = (readmeDiff(/^-/gm) || []).length;
        const totalChanges = linesAdded + linesRemoved;
        
        return totalChanges > 50; // –°—á–∏—Ç–∞–µ–º –∫—Ä—É–ø–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 50 —Å—Ç—Ä–æ–∫
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ README.md:', error.message);
        return false;
      }
    }
    
    return false;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–º–º–∏—Ç–∞
  prepareCommit() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      const changedFiles = this.getChangedFiles();
      
      if (changedFiles.length === 0) {
        console.log('‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞.');
        return false;
      }
      
      console.log('üìÅ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
      changedFiles.forEach(file => {
        console.log(`  - ${file}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å README
      const readmeNeedsUpdate = this.hasReadmeChanges() || this.isMajorChange();
      
      if (readmeNeedsUpdate) {
        console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ README.md –∏–ª–∏ –∫—Ä—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º README
        const READMEUpdater = require('./update-readme');
        const readmeUpdater = new READMEUpdater();
        const readmeUpdated = readmeUpdater.updateREADME();
        
        if (readmeUpdated) {
          console.log('‚úÖ README.md —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π README –≤ staging
          try {
            execSync('git add README.md', { stdio: 'inherit' });
            console.log('‚úÖ README.md –¥–æ–±–∞–≤–ª–µ–Ω –≤ staging area');
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ README.md –≤ staging:', error.message);
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º changelog
        const changelogUpdated = this.updateChangelog();
        
        if (changelogUpdated) {
          try {
            execSync('git add CHANGELOG.md', { stdio: 'inherit' });
            console.log('‚úÖ CHANGELOG.md –¥–æ–±–∞–≤–ª–µ–Ω –≤ staging area');
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ CHANGELOG.md –≤ staging:', error.message);
          }
        }
        
        console.log('‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∫–æ–º–º–∏—Ç—É! README.md –∏ CHANGELOG.md –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
        return true;
      } else {
        console.log('‚ÑπÔ∏è  README.md –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
        return false;
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–æ–º–º–∏—Ç–∞:', error);
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  checkStatus() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
      
      const changedFiles = this.getChangedFiles();
      const hasStagedFiles = execSync('git diff --cached --name-only', { encoding: 'utf8' }).trim().length > 0;
      
      console.log(`üìÅ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${changedFiles.length}`);
      console.log(`üì¶ –§–∞–π–ª–æ–≤ –≤ staging: ${hasStagedFiles ? '–î–∞' : '–ù–µ—Ç'}`);
      
      if (changedFiles.length > 0) {
        console.log('üìÅ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
        changedFiles.forEach(file => {
          console.log(`  - ${file}`);
        });
      }
      
      return {
        hasChanges: changedFiles.length > 0,
        hasStagedFiles,
        changedFiles
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
      return {
        hasChanges: false,
        hasStagedFiles: false,
        changedFiles: []
      };
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

const prepareCommit = new PrepareCommit();

switch (command) {
  case 'status':
    prepareCommit.checkStatus();
    break;
  case 'update':
    const updated = prepareCommit.prepareCommit();
    process.exit(updated ? 0 : 1);
    break;
  case 'help':
  default:
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/prepare-commit.js [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  status              - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π
  update              - –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å README.md –∫ –∫–æ–º–º–∏—Ç—É
  help                - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/prepare-commit.js status
  node scripts/prepare-commit.js update
    `);
    break;
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –∫–æ–º–º–∏—Ç—É
if (require.main === module && !command) {
  const updated = prepareCommit.prepareCommit();
  process.exit(updated ? 0 : 1);
}

module.exports = PrepareCommit;