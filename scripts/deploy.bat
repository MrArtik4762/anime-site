@echo off
REM –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ-—Å–∞–π—Ç–∞ –¥–ª—è Windows
REM –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: scripts\deploy.bat [dev|prod|monitoring|logs|stop|cleanup|health]

setlocal enabledelayedexpansion

REM –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)
set "RED=[91m"
set "GREEN=[92m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "NC=[0m"

REM –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
:print_info
echo %BLUE%[INFO]%NC% %~1
goto :eof

:print_success
echo %GREEN%[SUCCESS]%NC% %~1
goto :eof

:print_warning
echo %YELLOW%[WARNING]%NC% %~1
goto :eof

:print_error
echo %RED%[ERROR]%NC% %~1
goto :eof

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
:check_dependencies
call :print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

docker --version >nul 2>&1
if errorlevel 1 (
    call :print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit /b 1
)

docker compose version >nul 2>&1
if errorlevel 1 (
    call :print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit /b 1
)

call :print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
goto :eof

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env
:check_env_file
call :print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

if not exist .env (
    call :print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ .env.example..."
    copy .env.example .env >nul
    call :print_warning "–í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º!"
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
if "%~1"=="prod" (
    findstr /C:"change-in-production" .env >nul
    if not errorlevel 1 (
        call :print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ .env!"
        call :print_error "–ò–∑–º–µ–Ω–∏—Ç–µ JWT_SECRET, MONGO_PASSWORD –∏ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ä–µ—Ç—ã!"
        exit /b 1
    )
)

call :print_success "–§–∞–π–ª .env –ø—Ä–æ–≤–µ—Ä–µ–Ω"
goto :eof

REM –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
:create_directories
call :print_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."

if not exist nginx\ssl mkdir nginx\ssl
if not exist server\uploads mkdir server\uploads
if not exist server\logs mkdir server\logs
if not exist monitoring\grafana\provisioning mkdir monitoring\grafana\provisioning

call :print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
goto :eof

REM –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
:deploy_dev
call :print_info "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."

docker compose -f docker-compose.dev.yml down
docker compose -f docker-compose.dev.yml build
docker compose -f docker-compose.dev.yml up -d

call :print_success "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω!"
call :print_info "Frontend: http://localhost:3000"
call :print_info "Backend API: http://localhost:5000"
call :print_info "MongoDB: localhost:27017"
call :print_info "Redis: localhost:6379"
goto :eof

REM –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
:deploy_prod
call :print_info "–ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ..."

docker compose down
docker compose build --no-cache
docker compose up -d

call :print_success "–ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω!"
call :print_info "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost"
call :print_info "–î–ª—è HTTPS –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ nginx\ssl\"
goto :eof

REM –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
:deploy_monitoring
call :print_info "–ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º..."

docker compose --profile monitoring down
docker compose --profile monitoring build
docker compose --profile monitoring up -d

call :print_success "–†–µ–∂–∏–º —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–∞–ø—É—â–µ–Ω!"
call :print_info "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost"
call :print_info "Grafana: http://localhost:3001"
call :print_info "Prometheus: http://localhost:9090"
goto :eof

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
:health_check
call :print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."

timeout /t 10 /nobreak >nul

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
curl -f http://localhost/health >nul 2>&1
if errorlevel 1 (
    call :print_warning "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
) else (
    call :print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ API
curl -f http://localhost/api/health >nul 2>&1
if errorlevel 1 (
    call :print_warning "API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
) else (
    call :print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç"
)

REM –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
call :print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose ps
goto :eof

REM –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
:show_logs
call :print_info "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose logs -f --tail=50
goto :eof

REM –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
:stop_services
call :print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

docker compose down
docker compose -f docker-compose.dev.yml down
docker compose --profile monitoring down

call :print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
goto :eof

REM –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
:cleanup
call :print_info "–û—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."

docker system prune -f
docker volume prune -f

call :print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
goto :eof

REM –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
:main
echo üê≥ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ-—Å–∞–π—Ç–∞
echo ==================================

call :check_dependencies

set "command=%~1"
if "%command%"=="" set "command=dev"

if "%command%"=="dev" (
    call :check_env_file "dev"
    call :create_directories
    call :deploy_dev
    call :health_check
) else if "%command%"=="prod" (
    call :check_env_file "prod"
    call :create_directories
    call :deploy_prod
    call :health_check
) else if "%command%"=="monitoring" (
    call :check_env_file "prod"
    call :create_directories
    call :deploy_monitoring
    call :health_check
) else if "%command%"=="logs" (
    call :show_logs
) else if "%command%"=="stop" (
    call :stop_services
) else if "%command%"=="cleanup" (
    call :stop_services
    call :cleanup
) else if "%command%"=="health" (
    call :health_check
) else (
    echo –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: %0 [dev^|prod^|monitoring^|logs^|stop^|cleanup^|health]
    echo.
    echo –ö–æ–º–∞–Ω–¥—ã:
    echo   dev        - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    echo   prod       - –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ
    echo   monitoring - –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    echo   logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
    echo   stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    echo   cleanup    - –û—á–∏—Å—Ç–∏—Ç—å Docker —Å–∏—Å—Ç–µ–º—É
    echo   health     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    exit /b 1
)

goto :eof

REM –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
call :main %*