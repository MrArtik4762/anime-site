#!/bin/bash

# Anime-Site Authentication Recovery Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

set -e

echo "üîß ANIME-SITE AUTHENTICATION RECOVERY TOOL"
echo "=========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local deps=("node" "npm" "mongosh" "curl")
    local missing_deps=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    
    local ports=(3000 5000 27017)
    local occupied_ports=()
    
    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            occupied_ports+=("$port")
        fi
    done
    
    if [ ${#occupied_ports[@]} -eq 0 ]; then
        log_warning "–í—Å–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã - —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
        return 1
    else
        log_success "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã: ${occupied_ports[*]}"
        return 0
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
    local ports=(3000 5000)
    
    for port in "${ports[@]}"; do
        local pid=$(lsof -ti:$port 2>/dev/null || true)
        if [ -n "$pid" ]; then
            log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port (PID: $pid)"
            kill -TERM $pid 2>/dev/null || true
            sleep 2
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if kill -0 $pid 2>/dev/null; then
                kill -KILL $pid 2>/dev/null || true
            fi
        fi
    done
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean_cache() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –û—á–∏—Å—Ç–∫–∞ npm –∫—ç—à–∞
    if [ -d "node_modules" ]; then
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ node_modules..."
        rm -rf node_modules
    fi
    
    if [ -d "client/node_modules" ]; then
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ client/node_modules..."
        rm -rf client/node_modules
    fi
    
    if [ -d "server/node_modules" ]; then
        log_info "–£–¥–∞–ª–µ–Ω–∏–µ server/node_modules..."
        rm -rf server/node_modules
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    if [ -d "logs" ]; then
        log_info "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤..."
        rm -rf logs/*
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    find . -name "*.log" -type f -delete 2>/dev/null || true
    find . -name ".DS_Store" -type f -delete 2>/dev/null || true
    
    log_success "–ö—ç—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã"
}

# –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
reinstall_dependencies() {
    log_info "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ö–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -f "package.json" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        npm install
    fi
    
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -f "client/package.json" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        cd client
        npm install
        cd ..
    fi
    
    # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -f "server/package.json" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        cd server
        npm install
        cd ..
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_configuration() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
    if [ ! -f "server/.env" ]; then
        log_warning "–§–∞–π–ª server/.env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        if [ -f "server/.env.example" ]; then
            log_info "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env.example –≤ .env..."
            cp server/.env.example server/.env
            log_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ server/.env —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
        fi
    fi
    
    if [ ! -f "client/.env" ]; then
        log_warning "–§–∞–π–ª client/.env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        if [ -f "client/.env.example" ]; then
            log_info "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env.example –≤ .env..."
            cp client/.env.example client/.env
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if [ -f "server/.env" ]; then
        local required_vars=("JWT_SECRET" "MONGODB_URI")
        local missing_vars=()
        
        for var in "${required_vars[@]}"; do
            if ! grep -q "^$var=" server/.env; then
                missing_vars+=("$var")
            fi
        done
        
        if [ ${#missing_vars[@]} -ne 0 ]; then
            log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env: ${missing_vars[*]}"
            return 1
        fi
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URI –∏–∑ .env
    local mongodb_uri=""
    if [ -f "server/.env" ]; then
        mongodb_uri=$(grep "^MONGODB_URI=" server/.env | cut -d'=' -f2- | tr -d '"')
    fi
    
    if [ -z "$mongodb_uri" ]; then
        log_error "MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ server/.env"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
    if mongosh "$mongodb_uri" --eval "db.runCommand('ping')" >/dev/null 2>&1; then
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        local collections=$(mongosh "$mongodb_uri" --quiet --eval "db.getCollectionNames()" 2>/dev/null || echo "[]")
        if [[ "$collections" == *"users"* ]]; then
            log_success "–ö–æ–ª–ª–µ–∫—Ü–∏—è users –Ω–∞–π–¥–µ–Ω–∞"
        else
            log_warning "–ö–æ–ª–ª–µ–∫—Ü–∏—è users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
        fi
    else
        log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        log_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MongoDB –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: $mongodb_uri"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
    if [ -f "server/package.json" ]; then
        log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
        cd server
        npm run dev > ../server.log 2>&1 &
        local server_pid=$!
        cd ..
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
        local attempts=0
        while [ $attempts -lt 30 ]; do
            if curl -s http://localhost:5000/api/auth/test >/dev/null 2>&1; then
                log_success "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $server_pid)"
                break
            fi
            sleep 1
            attempts=$((attempts + 1))
        done
        
        if [ $attempts -eq 30 ]; then
            log_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥"
            return 1
        fi
    fi
    
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–µ
    if [ -f "client/package.json" ]; then
        log_info "–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞..."
        cd client
        npm start > ../client.log 2>&1 &
        local client_pid=$!
        cd ..
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
        log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞..."
        local attempts=0
        while [ $attempts -lt 60 ]; do
            if curl -s http://localhost:3000 >/dev/null 2>&1; then
                log_success "–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω (PID: $client_pid)"
                break
            fi
            sleep 1
            attempts=$((attempts + 1))
        done
        
        if [ $attempts -eq 60 ]; then
            log_error "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
            return 1
        fi
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
test_system() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if curl -s http://localhost:5000/api/auth/test >/dev/null; then
        log_success "–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        log_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    # –¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if curl -s http://localhost:3000 >/dev/null; then
        log_success "–ö–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "–ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    local auth_response=$(curl -s -X POST http://localhost:5000/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"identifier":"test","password":"test"}' || echo "error")
    
    if [[ "$auth_response" == *"error"* ]] || [[ "$auth_response" == *"–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"* ]] || [[ "$auth_response" == *"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"* ]]; then
        log_success "–≠–Ω–¥–ø–æ–∏–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_warning "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
create_test_user() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    
    local test_user_data='{
        "username": "testuser",
        "email": "test@anime-site.local",
        "password": "TestPassword123",
        "confirmPassword": "TestPassword123"
    }'
    
    local response=$(curl -s -X POST http://localhost:5000/api/auth/register \
        -H "Content-Type: application/json" \
        -d "$test_user_data" || echo "error")
    
    if [[ "$response" == *"success"* ]]; then
        log_success "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω"
        log_info "Email: test@anime-site.local"
        log_info "Password: TestPassword123"
    elif [[ "$response" == *"—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"* ]]; then
        log_warning "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        log_info "–û—Ç–≤–µ—Ç: $response"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local action=${1:-"full"}
    
    case $action in
        "check")
            log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã..."
            check_dependencies
            check_ports
            check_configuration
            check_database
            ;;
        "clean")
            log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏..."
            stop_services
            clean_cache
            ;;
        "install")
            log_info "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            reinstall_dependencies
            ;;
        "start")
            log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            start_services
            test_system
            ;;
        "test")
            log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
            test_system
            ;;
        "user")
            log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
            create_test_user
            ;;
        "full"|*)
            log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
            check_dependencies
            stop_services
            clean_cache
            reinstall_dependencies
            check_configuration
            check_database
            start_services
            sleep 5
            test_system
            create_test_user
            ;;
    esac
    
    echo ""
    log_success "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  $0 check    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  $0 clean    - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"
    echo "  $0 install  - –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo "  $0 start    - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  $0 test     - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  $0 user     - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo "  $0 full     - –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo ""
    echo "üåê –°—Å—ã–ª–∫–∏:"
    echo "  –ö–ª–∏–µ–Ω—Ç: http://localhost:3000"
    echo "  –°–µ—Ä–≤–µ—Ä: http://localhost:5000"
    echo "  API —Ç–µ—Å—Ç: http://localhost:5000/api/auth/test"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"