const NodeCache = require('node-cache');
const anilibriaV1 = require('./anilibriaV1');
const { logger } = require('../utils/logger');
const { db } = require('../db/knex');
const cacheService = require('./cacheService');

class CatalogService {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NodeCache —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ 10 –º–∏–Ω—É—Ç (–¥–ª—è fallback)
    this.fallbackCache = new NodeCache({
      stdTTL: 600, // 10 –º–∏–Ω—É—Ç
      checkperiod: 60,
      useClones: false
    });

    // –ö–ª—é—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.cacheKeys = {
      popular: 'popular',
      new: 'new',
      rating: 'rating',
      search: 'search',
      all: 'all'
    };

    logger.info('CatalogService initialized with Redis cache and NodeCache fallback');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
   * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @param {string} options.type - –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (popular, new, rating, search)
   * @param {string} options.query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {number} options.page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {number} options.limit - –õ–∏–º–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * @param {Array} options.genres - –ñ–∞–Ω—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {number} options.year - –ì–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {string} options.sortBy - –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @param {string} options.sortOrder - –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–Ω–∏–º–µ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getAnimeWithFallback(options = {}) {
    const {
      type = 'all',
      query = '',
      page = 1,
      limit = 24,
      genres = [],
      year,
      sortBy = 'rating',
      sortOrder = 'desc'
    } = options;

    const cacheKey = this.generateCacheKey({
      type,
      query,
      page,
      limit,
      genres,
      year,
      sortBy,
      sortOrder
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    let cached = await cacheService.get(cacheKey, 'catalog:');
    if (cached) {
      logger.debug(`Redis cache hit for key: ${cacheKey}`);
      return cached;
    }

    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
    cached = this.fallbackCache.get(cacheKey);
    if (cached) {
      logger.debug(`Fallback cache hit for key: ${cacheKey}`);
      return cached;
    }

    logger.debug(`Cache miss for key: ${cacheKey}`);

    try {
      console.log(`üì° [catalogService] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ AniLibria API –¥–ª—è –∫–ª—é—á–∞: ${cacheKey}`);
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ AniLibria API
      const apiData = await this.fetchFromAniLibria({
        type,
        query,
        page,
        limit,
        genres,
        year,
        sortBy,
        sortOrder
      });

      if (apiData && apiData.list && apiData.list.length > 0) {
        console.log(`‚úÖ [catalogService] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${apiData.list.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ AniLibria API`);
        // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç API –≤ Redis –∏ fallback
        await cacheService.set(cacheKey, apiData, 'catalog:');
        this.fallbackCache.set(cacheKey, apiData);
        logger.debug(`API data cached for key: ${cacheKey}`);
        return apiData;
      } else {
        console.log(`‚ö†Ô∏è [catalogService] AniLibria API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback`);
      }
    } catch (apiError) {
      console.log(`‚ùå [catalogService] –û—à–∏–±–∫–∞ AniLibria API: ${apiError.message}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback`);
      logger.warn(`API request failed, falling back to database: ${apiError.message}`);
    }

    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log(`üíæ [catalogService] –ó–∞–ø—Ä–æ—Å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞: ${cacheKey}`);
    let fallbackData = await this.fetchFromDatabase({
      type,
      query,
      page,
      limit,
      genres,
      year,
      sortBy,
      sortOrder
    });

    console.log(`üìä [catalogService] –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ë–î: ${fallbackData.list.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏—Å—Ç–æ—á–Ω–∏–∫: ${fallbackData.source}`);

    // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π fallback —Å mock –¥–∞–Ω–Ω—ã–º–∏
    if (fallbackData.list.length === 0) {
      console.log(`‚ö†Ô∏è [catalogService] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –¥–ª—è –∫–ª—é—á–∞: ${cacheKey}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock fallback –¥–∞–Ω–Ω—ã–µ`);
      logger.warn(`Database is empty for key: ${cacheKey}, using mock fallback data`);
      fallbackData = this.generateMockData({
        type,
        query,
        page,
        limit,
        genres,
        year,
        sortBy,
        sortOrder
      });
      console.log(`‚úÖ [catalogService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ mock –¥–∞–Ω–Ω—ã—Ö: ${fallbackData.list.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }

    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç fallback –≤ Redis –∏ fallback –∫—ç—à
    await cacheService.set(cacheKey, fallbackData, 'catalog:');
    this.fallbackCache.set(cacheKey, fallbackData);
    logger.debug(`Fallback data cached for key: ${cacheKey}`);

    return fallbackData;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ AniLibria API
   */
  async fetchFromAniLibria(options) {
    const { type, query, page, limit, genres, year, sortBy, sortOrder } = options;

    try {
      let result;

      if (query) {
        // –ü–æ–∏—Å–∫
        result = await anilibriaV1.searchTitles({
          query,
          page,
          limit,
          sort: sortBy
        });
      } else {
        // –ö–∞—Ç–∞–ª–æ–≥
        result = await anilibriaV1.getCatalog({
          page,
          limit,
          genres,
          year,
          order: this.mapSortToApi(sortBy)
        });
      }

      if (!result || !result.list || result.list.length === 0) {
        throw new Error('No data from AniLibria API');
      }

      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
      return {
        list: result.list.map(item => this.transformAniLibriaItem(item)),
        pagination: result.pagination || {
          total: result.list.length,
          page,
          limit
        },
        source: 'anilibria',
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      logger.error(`AniLibria API error: ${error.message}`);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ fallback
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (fallback)
   */
  async fetchFromDatabase(options) {
    const { type, query, page, limit, genres, year, season, sortBy, sortOrder } = options;
    
    try {
      console.log(`üîç [catalogService.fetchFromDatabase] –ó–∞–ø—Ä–æ—Å –∫ –ë–î:`, {
        type, query, page, limit, genres: genres?.length, year, season, sortBy, sortOrder
      });
      
      const skip = (page - 1) * limit;
      let sortQuery = {};

      // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è SQLite
      let queryBuilder = db('animes')
        .select('*')
        .where({ is_active: true, is_approved: true });

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      if (query) {
        queryBuilder = queryBuilder.where(function() {
          this.where('title', 'like', `%${query}%`)
              .orWhere('english_title', 'like', `%${query}%`)
              .orWhere('japanese_title', 'like', `%${query}%`)
              .orWhere('romaji_title', 'like', `%${query}%`);
        });
      }

      if (genres && genres.length > 0) {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∂–∞–Ω—Ä–∞–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        // TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∂–∞–Ω—Ä–∞–º –¥–ª—è SQLite
        console.log('Genre filtering disabled temporarily. Genres:', genres);
      }

      if (year) {
        queryBuilder = queryBuilder.where({ year });
      }

      if (type && type !== 'all') {
        queryBuilder = queryBuilder.where({ type });
      }

      if (season) {
        queryBuilder = queryBuilder.where({ season });
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      let orderClause = '';
      if (sortBy === 'popular') {
        orderClause = `popularity ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;
      } else if (sortBy === 'new' || sortBy === 'new-anime') {
        orderClause = `created_at ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;
      } else if (sortBy === 'new-episodes') {
        orderClause = `updated_at ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;
      } else if (sortBy === 'rating') {
        orderClause = `rating_score ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;
      } else {
        orderClause = `updated_at ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const totalCountResult = await queryBuilder.clone().count('id as count').first();
      const totalCount = parseInt(totalCountResult.count);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      const animeList = await queryBuilder
        .offset(skip)
        .limit(limit)
        .orderByRaw(orderClause);

      const result = {
        list: animeList.map(anime => this.transformAnimeDocument(anime)),
        pagination: {
          total: totalCount,
          page,
          limit,
          pages: Math.ceil(totalCount / limit)
        },
        source: 'database',
        timestamp: new Date().toISOString()
      };
      
      console.log(`‚úÖ [catalogService.fetchFromDatabase] –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î:`, {
        totalCount,
        returnedItems: animeList.length,
        page,
        limit,
        sortBy,
        sortOrder
      });
      
      return result;

    } catch (error) {
      logger.error(`Database fallback error: ${error.message}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      return {
        list: [],
        pagination: {
          total: 0,
          page,
          limit,
          pages: 0
        },
        source: 'database',
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å SQLite –≤ —Ñ–æ—Ä–º–∞—Ç API
   */
  transformAnimeDocument(anime) {
    return {
      id: anime.id,
      title: anime.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      english_title: anime.english_title || anime.title || 'No Title',
      japanese_title: anime.japanese_title || anime.title || '„Çø„Ç§„Éà„É´„Å™„Åó',
      names: {
        ru: anime.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        en: anime.english_title || anime.title || 'No Title',
        jp: anime.japanese_title || anime.title || '„Çø„Ç§„Éà„É´„Å™„Åó'
      },
      description: anime.synopsis || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      poster: anime.poster_url || 'https://anilibria.top/poster.jpg',
      posters: {
        small: anime.poster_url || 'https://anilibria.top/poster.jpg',
        original: anime.poster_url || 'https://anilibria.top/poster.jpg'
      },
      year: anime.year,
      status: this.mapStatus(anime.status),
      genres: anime.genres ? JSON.parse(anime.genres) : [],
      episodes: anime.episodes || 0,
      type: this.mapType(anime.type),
      season: anime.season || '',
      rating: anime.rating_score || 0,
      votes: anime.rating_votes || 0,
      weeklyViews: Math.floor(Math.random() * 10000), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      createdAt: anime.created_at,
      updatedAt: anime.updated_at,
      fresh_at: anime.updated_at, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ
      name: {
        main: anime.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        english: anime.english_title || anime.title || 'No Title',
        alternative: []
      }
    };
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç AniLibria –≤ —Ñ–æ—Ä–º–∞—Ç API
   */
  transformAniLibriaItem(item) {
    return {
      id: item.id,
      title: item.names?.ru || item.names?.en || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      english_title: item.names?.en || item.names?.ru || 'No Title',
      japanese_title: item.names?.jp || item.names?.en || '„Çø„Ç§„Éà„É´„Å™„Åó',
      names: {
        ru: item.names?.ru || item.names?.en || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        en: item.names?.en || item.names?.ru || 'No Title',
        jp: item.names?.jp || item.names?.en || '„Çø„Ç§„Éà„É´„Å™„Åó'
      },
      description: item.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      poster: item.posters?.small?.url || item.posters?.original?.url || 'https://anilibria.top/poster.jpg',
      posters: {
        small: item.posters?.small?.url || item.posters?.original?.url || 'https://anilibria.top/poster.jpg',
        original: item.posters?.original?.url || item.posters?.small?.url || 'https://anilibria.top/poster.jpg'
      },
      year: item.year,
      status: item.status || '–û–Ω–≥–æ–∏–Ω–≥',
      genres: item.genres || [],
      episodes: item.episodes?.length || 0,
      type: item.type || '–¢–í',
      season: item.season || '',
      rating: item.score || 0,
      votes: item.votes || 0,
      weeklyViews: item.views || 0,
      createdAt: item.createdAt,
      updatedAt: item.updatedAt,
      fresh_at: item.updatedAt, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ
      name: {
        main: item.names?.ru || item.names?.en || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        english: item.names?.en || item.names?.ru || 'No Title',
        alternative: item.names?.alt || []
      }
    };
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
   */
  generateCacheKey(options) {
    const { type, query, page, limit, genres, year, sortBy, sortOrder } = options;
    
    const keyParts = [
      this.cacheKeys[type] || this.cacheKeys.all,
      query ? `:${query}` : '',
      page,
      limit,
      genres.length > 0 ? `:${genres.sort().join(',')}` : '',
      year ? `:${year}` : '',
      sortBy,
      sortOrder
    ];

    return keyParts.join('').replace(/[:\s]/g, '_');
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ AniLibria API
   */
  mapSortToApi(sortBy) {
    const mapping = {
      'popular': 'popular',
      'new': 'updated',
      'rating': 'rating',
      'updated': 'updated'
    };
    return mapping[sortBy] || 'updated';
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å
   */
  mapStatus(status) {
    const mapping = {
      'Finished Airing': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      'Currently Airing': '–û–Ω–≥–æ–∏–Ω–≥',
      'Not yet aired': '–ê–Ω–æ–Ω—Å'
    };
    return mapping[status] || status;
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∏–ø
   */
  mapType(type) {
    const mapping = {
      'TV': '–¢–í',
      'Movie': '–§–∏–ª—å–º',
      'OVA': 'OVA',
      'ONA': 'ONA',
      'Special': '–°–ø–µ—à–ª',
      'Music': '–ú—É–∑—ã–∫–∞'
    };
    return mapping[type] || type;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
   */
  clearCache() {
    if (this.cache && typeof this.cache.clear === 'function') {
      this.cache.clear();
    }
    if (this.fallbackCache && typeof this.fallbackCache.clear === 'function') {
      this.fallbackCache.clear();
    }
    logger.info('Catalog cache cleared');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getCacheStats() {
    return {
      redisCache: {
        enabled: cacheService && typeof cacheService.getKeys === 'function',
        size: 'N/A',
        maxSize: 'N/A',
        itemCount: 'N/A',
        ttl: 'N/A'
      },
      fallbackCache: {
        size: this.fallbackCache ? this.fallbackCache.getStats().keys : 0,
        maxSize: this.fallbackCache ? this.fallbackCache.getStats().maxKeys : 'N/A',
        itemCount: this.fallbackCache ? this.fallbackCache.getStats().keys : 0,
        ttl: this.fallbackCache ? this.fallbackCache.options.stdTTL : 'N/A'
      }
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
   */
  generateMockData(options = {}) {
    const {
      type = 'all',
      query = '',
      page = 1,
      limit = 24,
      genres = [],
      year,
      sortBy = 'rating',
      sortOrder = 'desc'
    } = options;
    
    console.log(`üé≠ [catalogService.generateMockData] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –¥–∞–Ω–Ω—ã—Ö:`, {
      type, query, page, limit, genres: genres?.length, year, sortBy, sortOrder
    });

    const mockAnimeList = [
      {
        id: `mock_${Date.now()}_1`,
        names: { ru: '–î–µ–º–æ–Ω-—É–±–∏–π—Ü–∞: –ö–ª–∏–Ω–æ–∫, —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤', en: 'Demon Slayer: Kimetsu no Yaiba', jp: 'È¨ºÊªÖ„ÅÆÂàÉ' },
        description: '–¢–∞–Ω–¥–∑–∏—Ä–æ –ö–∞–º–∞–¥–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–º –Ω–∞ –¥–µ–º–æ–Ω–æ–≤ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –µ–≥–æ —Å–µ–º—å—è –±—ã–ª–∞ —É–±–∏—Ç–∞, –∞ –µ–≥–æ –º–ª–∞–¥—à–∞—è —Å–µ—Å—Ç—Ä–∞ –ù—ç–∑—É–∫–æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∞ –≤ –¥–µ–º–æ–Ω–∞.',
        posters: { small: 'https://anilibria.top/poster1.jpg', original: 'https://anilibria.top/poster1.jpg' },
        year: 2019,
        status: '–û–Ω–≥–æ–∏–Ω–≥',
        genres: ['–∞–Ω–∏–º–µ', '—Å—ç–π–Ω—ç–Ω', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '—Ñ—ç–Ω—Ç–µ–∑–∏', '–±–æ–µ–≤–∏–∫'],
        episodes: 26,
        type: '–¢–í',
        season: '–≤–µ—Å–Ω–∞',
        rating: 8.7,
        votes: 2500000,
        weeklyViews: 150000,
        createdAt: new Date(Date.now() - 86400000 * 10).toISOString(),
        updatedAt: new Date().toISOString(),
        fresh_at: new Date(Date.now() - 86400000 * 5).toISOString(),
        name: { main: '–î–µ–º–æ–Ω-—É–±–∏–π—Ü–∞: –ö–ª–∏–Ω–æ–∫, —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤', english: 'Demon Slayer', alternative: [] }
      },
      {
        id: `mock_${Date.now()}_2`,
        names: { ru: '–í—Ä–∞—Ç–∞ –®—Ç–µ–π–Ω–∞: –≠—Ñ—Ñ–µ–∫—Ç –•–∏–≥–≥—Å–∞', en: 'Steins;Gate: The Higuchi Field Effect', jp: '„Ç∑„É•„Çø„Ç§„É≥„Ç∫„Éª„Ç≤„Éº„Éà' },
        description: '–ì—Ä—É–ø–ø–∞ –¥—Ä—É–∑–µ–π —Å–æ–∑–¥–∞–µ—Ç –º–∞—à–∏–Ω—É, —Å–ø–æ—Å–æ–±–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–µ, –Ω–æ –∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º.',
        posters: { small: 'https://anilibria.top/poster2.jpg', original: 'https://anilibria.top/poster2.jpg' },
        year: 2011,
        status: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        genres: ['–∞–Ω–∏–º–µ', '—Å—ç–π–Ω—ç–Ω', '–¥—Ä–∞–º–∞', '–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '—Ç—Ä–∏–ª–ª–µ—Ä'],
        episodes: 24,
        type: '–¢–í',
        season: '–≤–µ—Å–Ω–∞',
        rating: 9.2,
        votes: 2200000,
        weeklyViews: 95000,
        createdAt: new Date(Date.now() - 86400000 * 20).toISOString(),
        updatedAt: new Date(Date.now() - 86400000 * 2).toISOString(),
        fresh_at: new Date(Date.now() - 86400000 * 2).toISOString(),
        name: { main: '–í—Ä–∞—Ç–∞ –®—Ç–µ–π–Ω–∞: –≠—Ñ—Ñ–µ–∫—Ç –•–∏–≥–≥—Å–∞', english: 'Steins;Gate', alternative: [] }
      },
      {
        id: `mock_${Date.now()}_3`,
        names: { ru: '–ê—Ç–∞–∫–∞ –¢–∏—Ç–∞–Ω–æ–≤: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω', en: 'Attack on Titan: Final Season', jp: 'ÈÄ≤ÊíÉ„ÅÆÂ∑®‰∫∫ ÊúÄÁªàÂ≠£' },
        description: '–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∞–≥–∞ —ç–ø–∏—á–µ—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –æ –±–æ—Ä—å–±–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ç–∏–≤ –¢–∏—Ç–∞–Ω–æ–≤.',
        posters: { small: 'https://anilibria.top/poster3.jpg', original: 'https://anilibria.top/poster3.jpg' },
        year: 2023,
        status: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        genres: ['–∞–Ω–∏–º–µ', '—Å—ç–π–Ω—ç–Ω', '—Ñ—ç–Ω—Ç–µ–∑–∏', '–¥—Ä–∞–º–∞', '–±–æ–µ–≤–∏–∫'],
        episodes: 35,
        type: '–¢–í',
        season: '–∑–∏–º–∞',
        rating: 9.1,
        votes: 2800000,
        weeklyViews: 180000,
        createdAt: new Date(Date.now() - 86400000 * 15).toISOString(),
        updatedAt: new Date(Date.now() - 86400000 * 1).toISOString(),
        fresh_at: new Date(Date.now() - 86400000 * 1).toISOString(),
        name: { main: '–ê—Ç–∞–∫–∞ –¢–∏—Ç–∞–Ω–æ–≤: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω', english: 'Attack on Titan', alternative: [] }
      },
      {
        id: `mock_${Date.now()}_4`,
        names: { ru: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞', en: 'Jujutsu Kaisen', jp: 'Âë™Ë°ìÂªªÊà¶' },
        description: '–Æ–¥–∑–∏ –ò—Ç–∞–¥–æ—Ä–∏ –ø–æ–≥–ª–æ—â–∞–µ—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–∫–ª—è—Ç—É—é —Å—É—â–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã —Å–ø–∞—Å—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–µ–Ω–∏–∫–æ–º —à–∫–æ–ª—ã –º–∞–≥–∏–∏.',
        posters: { small: 'https://anilibria.top/poster4.jpg', original: 'https://anilibria.top/poster4.jpg' },
        year: 2020,
        status: '–û–Ω–≥–æ–∏–Ω–≥',
        genres: ['–∞–Ω–∏–º–µ', '—Å—ç–π–Ω—ç–Ω', '—Å—É–ø–µ—Ä—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ', '–±–æ–µ–≤–∏–∫', '—à–∫–æ–ª–∞'],
        episodes: 24,
        type: '–¢–í',
        season: '–æ—Å–µ–Ω—å',
        rating: 8.5,
        votes: 1800000,
        weeklyViews: 120000,
        createdAt: new Date(Date.now() - 86400000 * 12).toISOString(),
        updatedAt: new Date(Date.now() - 86400000 * 3).toISOString(),
        fresh_at: new Date(Date.now() - 86400000 * 3).toISOString(),
        name: { main: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞', english: 'Jujutsu Kaisen', alternative: [] }
      },
      {
        id: `mock_${Date.now()}_5`,
        names: { ru: '–¢–æ–∫–∏–π—Å–∫–∏–µ –º—Å—Ç–∏—Ç–µ–ª–∏', en: 'Tokyo Revengers', jp: 'Êù±‰∫¨„É™„Éô„É≥„Ç∏„É£„Éº„Ç∫' },
        description: '–¢–∞–∫–µ–º–∏—Ç–∏ –•–∞–Ω–∞–≥–∞–∫–∏ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ –µ–≥–æ –±—ã–≤—à–∞—è –¥–µ–≤—É—à–∫–∞ –±—ã–ª–∞ —É–±–∏—Ç–∞ –±–∞–Ω–¥–æ–π –¢–æ–∫–∏–π—Å–∫–∏—Ö –º—Å—Ç–∏—Ç–µ–ª–µ–π, –∏ –ø–æ–ª—É—á–∞–µ—Ç —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ.',
        posters: { small: 'https://anilibria.top/poster5.jpg', original: 'https://anilibria.top/poster5.jpg' },
        year: 2021,
        status: '–û–Ω–≥–æ–∏–Ω–≥',
        genres: ['–∞–Ω–∏–º–µ', '—Å—ç–π–Ω—ç–Ω', '–¥—Ä–∞–º–∞', '–±–æ–µ–≤–∏–∫', '–∫—Ä–∏–º–∏–Ω–∞–ª'],
        episodes: 37,
        type: '–¢–í',
        season: '–≤–µ—Å–Ω–∞',
        rating: 8.2,
        votes: 1500000,
        weeklyViews: 85000,
        createdAt: new Date(Date.now() - 86400000 * 8).toISOString(),
        updatedAt: new Date(Date.now() - 86400000 * 4).toISOString(),
        fresh_at: new Date(Date.now() - 86400000 * 4).toISOString(),
        name: { main: '–¢–æ–∫–∏–π—Å–∫–∏–µ –º—Å—Ç–∏—Ç–µ–ª–∏', english: 'Tokyo Revengers', alternative: [] }
      }
    ];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const additionalItems = Math.max(0, limit - mockAnimeList.length);
    for (let i = 0; i < additionalItems; i++) {
      mockAnimeList.push({
        id: `mock_${Date.now()}_${i + 6}`,
        names: { ru: `–¢–µ—Å—Ç–æ–≤–æ–µ –∞–Ω–∏–º–µ ${i + 6}`, en: `Test Anime ${i + 6}`, jp: `„ÉÜ„Çπ„Éà„Ç¢„Éã„É°${i + 6}` },
        description: `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–µ ${i + 6}. –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞.`,
        posters: { small: 'https://anilibria.top/poster_default.jpg', original: 'https://anilibria.top/poster_default.jpg' },
        year: 2023 + (i % 3),
        status: i % 2 === 0 ? '–û–Ω–≥–æ–∏–Ω–≥' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        genres: ['–∞–Ω–∏–º–µ', '—Ç–µ—Å—Ç', '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è'],
        episodes: 12 + (i % 12),
        type: '–¢–í',
        season: ['–≤–µ—Å–Ω–∞', '–ª–µ—Ç–æ', '–æ—Å–µ–Ω—å', '–∑–∏–º–∞'][i % 4],
        rating: 7.5 + (i % 20) * 0.1,
        votes: 500000 + (i % 1000000),
        weeklyViews: 10000 + (i % 50000),
        createdAt: new Date(Date.now() - 86400000 * (5 + i)).toISOString(),
        updatedAt: new Date(Date.now() - 86400000 * (2 + i % 3)).toISOString(),
        fresh_at: new Date(Date.now() - 86400000 * (2 + i % 3)).toISOString(),
        name: { main: `–¢–µ—Å—Ç–æ–≤–æ–µ –∞–Ω–∏–º–µ ${i + 6}`, english: `Test Anime ${i + 6}`, alternative: [] }
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let sortedList = [...mockAnimeList];
    if (sortBy === 'rating') {
      sortedList.sort((a, b) => sortOrder === 'desc' ? b.rating - a.rating : a.rating - b.rating);
    } else if (sortBy === 'new' || sortBy === 'new-anime') {
      sortedList.sort((a, b) => sortOrder === 'desc' ?
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime() :
        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
    } else if (sortBy === 'new-episodes') {
      sortedList.sort((a, b) => sortOrder === 'desc' ?
        new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime() :
        new Date(a.updatedAt).getTime() - new Date(b.updatedAt).getTime());
    } else {
      sortedList.sort((a, b) => sortOrder === 'desc' ? b.rating - a.rating : a.rating - b.rating);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedList = sortedList.slice(startIndex, endIndex);

    const result = {
      list: paginatedList,
      pagination: {
        total: sortedList.length,
        page,
        limit,
        pages: Math.ceil(sortedList.length / limit)
      },
      source: 'mock_fallback',
      timestamp: new Date().toISOString(),
      error: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞'
    };
    
    console.log(`‚úÖ [catalogService.generateMockData] Mock –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:`, {
      totalItems: sortedList.length,
      returnedItems: paginatedList.length,
      page,
      limit,
      sortBy,
      sortOrder
    });
    
    return result;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const catalogService = new CatalogService();

module.exports = catalogService;