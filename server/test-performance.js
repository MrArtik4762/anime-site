const SourcesFetcher = require('./services/sourcesFetcher');
const { performance } = require('perf_hooks');

async function runPerformanceTests() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (–±–µ–∑ –∫—ç—à–∞)
    console.log('\nüîç –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (–±–µ–∑ –∫—ç—à–∞)');
    const coldStart = performance.now();
    
    const coldResult = await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
      providers: ['anilibria', 'shikimori'],
      enableCache: false,
      enableRetry: false
    });
    
    const coldEnd = performance.now();
    const coldTime = coldEnd - coldStart;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞:`);
    console.log(`   - –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${coldTime.toFixed(2)}ms`);
    console.log(`   - –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${coldResult.total}`);
    
    // –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)');
    const cachedStart = performance.now();
    
    const cachedResult = await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
      providers: ['anilibria', 'shikimori'],
      enableCache: true,
      enableRetry: false
    });
    
    const cachedEnd = performance.now();
    const cachedTime = cachedEnd - cachedStart;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞:`);
    console.log(`   - –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${cachedTime.toFixed(2)}ms`);
    console.log(`   - –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${cachedResult.total}`);
    console.log(`   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${coldTime > 0 ? (coldTime / cachedTime).toFixed(2) : '‚àû'}x`);
    
    // –¢–µ—Å—Ç 3: –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—ç—à (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
    console.log('\nüîç –¢–µ—Å—Ç 3: –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –∫—ç—à (10 –∑–∞–ø—Ä–æ—Å–æ–≤)');
    const cacheLoadStart = performance.now();
    const cacheLoadPromises = [];
    
    for (let i = 0; i < 10; i++) {
      cacheLoadPromises.push(
        SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
          providers: ['shikimori'],
          enableCache: true,
          enableRetry: false
        })
      );
    }
    
    const cacheLoadResults = await Promise.all(cacheLoadPromises);
    const cacheLoadEnd = performance.now();
    const cacheLoadTime = cacheLoadEnd - cacheLoadStart;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫—ç—à:`);
    console.log(`   - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${cacheLoadTime.toFixed(2)}ms`);
    console.log(`   - –ó–∞–ø—Ä–æ—Å–æ–≤: 10`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${(cacheLoadTime / 10).toFixed(2)}ms`);
    console.log(`   - –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ: ${cacheLoadResults[0].total}`);
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    console.log('\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
    const providers = ['anilibria', 'shikimori', 'jikan'];
    const providerResults = {};
    
    for (const provider of providers) {
      const providerStart = performance.now();
      
      try {
        const result = await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
          providers: [provider],
          enableCache: false,
          enableRetry: false
        });
        
        const providerEnd = performance.now();
        const providerTime = providerEnd - providerStart;
        
        providerResults[provider] = {
          time: providerTime,
          sources: result.total,
          success: true
        };
        
        console.log(`   - ${provider}: ${providerTime.toFixed(2)}ms, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${result.total}`);
      } catch (error) {
        const providerEnd = performance.now();
        const providerTime = providerEnd - providerStart;
        
        providerResults[provider] = {
          time: providerTime,
          sources: 0,
          success: false,
          error: error.message
        };
        
        console.log(`   - ${provider}: ${providerTime.toFixed(2)}ms, –æ—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    // –¢–µ—Å—Ç 5: –°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (–∫—ç—à + –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
    console.log('\nüîç –¢–µ—Å—Ç 5: –°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞');
    const mixedStart = performance.now();
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
      providers: ['anilibria'],
      enableCache: true,
      enableRetry: false
    });
    
    // –ó–∞—Ç–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
      providers: ['shikimori'],
      enableCache: false,
      enableRetry: false
    });
    
    // –ò —Å–Ω–æ–≤–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
      providers: ['anilibria'],
      enableCache: true,
      enableRetry: false
    });
    
    const mixedEnd = performance.now();
    const mixedTime = mixedEnd - mixedStart;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º–µ—à–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏:`);
    console.log(`   - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${mixedTime.toFixed(2)}ms`);
    console.log(`   - –ó–∞–ø—Ä–æ—Å–æ–≤: 3 (1 –∏–∑ –∫—ç—à–∞, 1 –Ω–æ–≤—ã–π, 1 –∏–∑ –∫—ç—à–∞)`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${(mixedTime / 3).toFixed(2)}ms`);
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    console.log('\nüîç –¢–µ—Å—Ç 6: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
    
    const testIterations = 5;
    const timesWithoutCache = [];
    const timesWithCache = [];
    
    for (let i = 0; i < testIterations; i++) {
      // –ë–µ–∑ –∫—ç—à–∞
      const noCacheStart = performance.now();
      await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
        providers: ['jikan'],
        enableCache: false,
        enableRetry: false
      });
      const noCacheEnd = performance.now();
      timesWithoutCache.push(noCacheEnd - noCacheStart);
      
      // –° –∫—ç—à–µ–º
      const withCacheStart = performance.now();
      await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
        providers: ['jikan'],
        enableCache: true,
        enableRetry: false
      });
      const withCacheEnd = performance.now();
      timesWithCache.push(withCacheEnd - withCacheStart);
    }
    
    const avgNoCache = timesWithoutCache.reduce((a, b) => a + b, 0) / timesWithoutCache.length;
    const avgWithCache = timesWithCache.reduce((a, b) => a + b, 0) / timesWithCache.length;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (${testIterations} –∏—Ç–µ—Ä–∞—Ü–∏–π):`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –±–µ–∑ –∫—ç—à–∞: ${avgNoCache.toFixed(2)}ms`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å –∫—ç—à–µ–º: ${avgWithCache.toFixed(2)}ms`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: ${avgNoCache > 0 ? (avgNoCache / avgWithCache).toFixed(2) : '‚àû'}x`);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runPerformanceTests();