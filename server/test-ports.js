const http = require('http');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
const ports = [5000, 3000, 8080, 9000];

function testPort(port) {
  return new Promise((resolve) => {
    const options = {
      hostname: 'localhost',
      port: port,
      path: '/health',
      method: 'GET',
      timeout: 5000
    };

    const req = http.request(options, (res) => {
      console.log(`‚úÖ –ü–æ—Ä—Ç ${port}: –û—Ç–≤–µ—Ç - ${res.statusCode}`);
      resolve({ port, status: 'success', statusCode: res.statusCode });
    });

    req.on('error', (error) => {
      // console.log(`‚ùå –ü–æ—Ä—Ç ${port}: ${error.message}`);
      resolve({ port, status: 'error', error: error.message });
    });

    req.on('timeout', () => {
      // console.log(`‚è∞ –ü–æ—Ä—Ç ${port}: –¢–∞–π–º–∞—É—Ç`);
      req.destroy();
      resolve({ port, status: 'timeout' });
    });

    req.end();
  });
}

async function testAllPorts() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤...\n');
  
  const results = await Promise.all(ports.map(testPort));
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  results.forEach(result => {
    if (result.status === 'success') {
      console.log(`‚úÖ –ü–æ—Ä—Ç ${result.port}: –î–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${result.statusCode})`);
    } else {
      console.log(`‚ùå –ü–æ—Ä—Ç ${result.port}: ${result.status === 'timeout' ? '–¢–∞–π–º–∞—É—Ç' : '–û—à–∏–±–∫–∞'}`);
    }
  });
  
  const workingPort = results.find(r => r.status === 'success');
  if (workingPort) {
    console.log(`\nüéâ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${workingPort.port}`);
    console.log(`üîó URL: http://localhost:${workingPort.port}/health`);
  } else {
    console.log('\nüòû –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö');
  }
}

testAllPorts();