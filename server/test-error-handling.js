const mongoose = require('mongoose');
const EpisodeSource = require('./models/EpisodeSource');
const Anime = require('./models/Anime');
const SourcesFetcher = require('./services/sourcesFetcher');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async function runErrorHandlingTests() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI_TEST || 'mongodb://localhost:27017/anime-site-test', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞–Ω–∏–º–µ
    const testAnime = new Anime({
      title: { english: 'Test Anime', japanese: '„ÉÜ„Çπ„Éà„Ç¢„Éã„É°', romaji: 'Tesuto Anime' },
      synopsis: 'Test anime description',
      type: 'TV',
      status: 'Finished Airing',
      episodes: 12,
      year: 2023,
      genres: ['Action', 'Adventure'],
      images: { poster: { small: 'test.jpg', medium: 'test.jpg', large: 'test.jpg' } },
      source: 'test',
      cached: true,
      approved: true,
      isActive: true
    });
    await testAnime.save();
    const testAnimeId = testAnime._id.toString();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∞–Ω–∏–º–µ —Å–æ–∑–¥–∞–Ω–æ, ID:', testAnimeId);

    // –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID –∞–Ω–∏–º–µ
    console.log('\nüîç –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID –∞–Ω–∏–º–µ');
    try {
      await SourcesFetcher.getEpisodeSources('invalid-id', {
        providers: ['aniliberty'],
        enableRetry: false
      });
      console.log('‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID');
    } catch (error) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID:', error.message);
    }

    // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –∞–Ω–∏–º–µ
    console.log('\nüîç –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –∞–Ω–∏–º–µ');
    try {
      const nonExistentId = new mongoose.Types.ObjectId().toString();
      const result = await SourcesFetcher.getEpisodeSources(nonExistentId, {
        providers: ['aniliberty'],
        enableRetry: false
      });
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID:', result.total);
    } catch (error) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID:', error.message);
    }

    // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    console.log('\nüîç –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
    try {
      const result = await SourcesFetcher.getEpisodeSources(testAnimeId, {
        providers: ['non-existent-provider'],
        enableRetry: false
      });
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', result);
      console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:', result.errors.length);
      console.log('   - –û—à–∏–±–∫–∏:', result.errors.map(e => e.provider));
    } catch (error) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', error.message);
    }

    // –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
    console.log('\nüîç –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏');
    try {
      const sourcesWithMissingFields = [
        {
          episodeNumber: 1,
          sourceUrl: 'https://test.com/video1.mp4'
          // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç quality, title, provider
        },
        {
          episodeNumber: 1,
          quality: '720p',
          title: 'Test Source'
          // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sourceUrl, provider
        }
      ];
      
      const result = await SourcesFetcher.saveEpisodeSources(sourcesWithMissingFields, testAnimeId);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:', result);
      console.log('   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', result.saved);
      console.log('   - –û–±–Ω–æ–≤–ª–µ–Ω–æ:', result.updated);
      console.log('   - –û—à–∏–±–∫–∏:', result.errors.length);
      console.log('   - –û—à–∏–±–∫–∏:', result.errors);
    } catch (error) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:', error.message);
    }

    // –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    console.log('\nüîç –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
      const testSource = new EpisodeSource({
        animeId: testAnimeId,
        episodeNumber: 1,
        sourceUrl: 'https://test.com/video.mp4',
        quality: '720p',
        title: 'Test Source',
        provider: 'aniliberty',
        priority: 1,
        isActive: true
      });
      await testSource.save();
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω');

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—Ç –∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫
      const result = await SourcesFetcher.saveEpisodeSources([{
        episodeNumber: 1,
        sourceUrl: 'https://test.com/video.mp4',
        quality: '720p',
        title: 'Test Source',
        provider: 'aniliberty',
        priority: 1
      }], testAnimeId);
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞:', result);
      console.log('   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', result.saved);
      console.log('   - –û–±–Ω–æ–≤–ª–µ–Ω–æ:', result.updated);
    } catch (error) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }

    // –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\nüîç –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    try {
      const promises = [];
      for (let i = 0; i < 3; i++) {
        promises.push(
          SourcesFetcher.getEpisodeSources(testAnimeId, {
            providers: ['aniliberty'],
            enableRetry: false
          })
        );
      }
      
      const results = await Promise.all(promises);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', results.length);
      results.forEach((result, index) => {
        console.log(`   - –ó–∞–ø—Ä–æ—Å ${index + 1}: ${result.total} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
      });
    } catch (error) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error.message);
    }

    // –û—á–∏—Å—Ç–∫–∞
    await EpisodeSource.deleteMany({});
    await Anime.deleteMany({});
    await mongoose.connection.close();
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runErrorHandlingTests();