const anilibriaV1 = require('../services/anilibriaV1');

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∞–Ω–∏–º–µ
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç SSR-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–∞–ª–æ–≥–∞
 */
export const getCatalogPage = async (req, res) => {
  try {
    const { filter } = req.params;
    const { search, page = 1, genre, year, status, rating, sortBy, sortOrder } = req.query;
    
    console.log(`üåê [catalogController] –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å SSR:`, {
      method: req.method,
      url: req.originalUrl,
      filter,
      page,
      search: search ? `"${search}"` : 'none',
      genre: genre ? genre.split(',') : 'none',
      year,
      status,
      rating,
      sortBy,
      sortOrder,
      userAgent: req.get('User-Agent'),
      timestamp: new Date().toISOString()
    });
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    const perPage = 20;
    const currentPage = parseInt(page);
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const filters = {
      genre: genre ? genre.split(',') : [],
      year: year || '',
      status: status || '',
      rating: rating || '',
      sortBy: sortBy || 'rating',
      sortOrder: sortOrder || 'desc',
    };
    
    let animeList = [];
    let totalCount = 0;
    let error = null;
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API AniLibria
      if (search) {
        const searchResult = await anilibriaV1.searchTitles({
          query: search,
          page: currentPage,
          limit: perPage,
          sort: sortBy || 'updated'
        });
        animeList = searchResult.list || [];
        totalCount = searchResult.pagination?.total || animeList.length;
      } else {
        const catalogResult = await anilibriaV1.getCatalog({
          page: currentPage,
          limit: perPage,
          genres: filters.genre,
          year: filters.year || undefined,
          order: filters.sortBy
        });
        animeList = catalogResult.list || [];
        totalCount = catalogResult.pagination?.total || animeList.length;
      }
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (animeList.length === 0) {
        console.log('No data from API, using fallback...');
        error = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API AniLibria';
      }
    } catch (apiError) {
      console.error('API Error:', apiError.message);
      error = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å API AniLibria';
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
      const mockAnime = [
        {
          id: 'fallback1',
          names: { ru: '–î–µ–≤–æ—á–∫–∏-–±–∞–±–æ—á–∫–∏', en: 'Butterfly Girls' },
          description: '–ò—Å—Ç–æ—Ä–∏—è –æ –¥–µ–≤–æ—á–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –±–∞–±–æ—á–µ–∫ –∏ —Å—Ä–∞–∂–∞—é—Ç—Å—è —Å–æ –∑–ª–æ–º.',
          posters: { small: { url: 'https://anilibria.top/poster.jpg' } },
          year: 2025,
          status: '–û–Ω–≥–æ–∏–Ω–≥',
          genres: ['–ú–∞–≥–∏—è', '–®–∫–æ–ª–∞', '–î—Ä–∞–º–∞'],
          episodes: 24,
          type: '–¢–í',
          season: '2025',
        },
        {
          id: 'fallback2',
          names: { ru: '–¢—Ä—É—Å–∫–∞, –ß—É–ª–∫–æ –∏ –ø—Ä–µ—Å–≤—è—Ç–æ–π –ü–æ–¥–≤—è–∑ 2', en: 'New Panty & Stocking with Garterbelt' },
          description: '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –¥–≤—É—Ö –ø–∞–¥—à–∏—Ö –∞–Ω–≥–µ–ª–æ–≤ –≤ –î–∞—Ç—ç–Ω-—Å–∏—Ç–∏.',
          posters: { small: { url: 'https://anilibria.top/poster2.jpg' } },
          year: 2025,
          status: '–û–Ω–≥–æ–∏–Ω–≥',
          genres: ['–ö–æ–º–µ–¥–∏—è', '–ü–∞—Ä–æ–¥–∏—è', '–§—ç–Ω—Ç–µ–∑–∏', '–≠–∫—à–µ–Ω'],
          episodes: 13,
          type: '–¢–í',
          season: '2025',
        }
      ];
      
      animeList = mockAnime;
      totalCount = mockAnime.length;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è SSR
    const ssrData = {
      animeList,
      totalCount,
      currentPage,
      filter,
      search,
      filters,
      error,
      timestamp: new Date().toISOString(),
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    res.set({
      'Cache-Control': 'public, s-maxage=600, stale-while-revalidate=1200', // 10 –º–∏–Ω—É—Ç –∫—ç—à
      'X-Data-Source': animeList.length > 0 ? 'api' : 'fallback',
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
    console.log(`‚úÖ [catalogController] –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç SSR:`, {
      filter,
      returnedItems: animeList.length,
      totalCount,
      currentPage,
      source: animeList.length > 0 ? 'api' : 'fallback',
      hasError: !!error,
      timestamp: new Date().toISOString()
    });
    
    res.json({
      success: true,
      data: ssrData,
    });
    
  } catch (err) {
    console.error('Catalog controller error:', err);
    
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined,
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å SEO-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
 */
export const getCatalogSeo = async (req, res) => {
  try {
    const { filter } = req.params;
    
    const seoData = {
      title: '',
      description: '',
      keywords: '',
      og: {
        title: '',
        description: '',
        image: '',
        url: '',
      },
    };
    
    switch (filter) {
      case 'popular':
        seoData.title = '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ - —Å–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
        seoData.description = '–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –≤—ã—Å–æ–∫–æ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–Ω–∏–º–µ. –°–º–æ—Ç—Ä–∏—Ç–µ –æ–Ω–ª–∞–π–Ω –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ. –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.';
        seoData.keywords = '–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ, —Ç–æ–ø –∞–Ω–∏–º–µ, –ª—É—á—à–µ–µ –∞–Ω–∏–º–µ, —Ä–µ–π—Ç–∏–Ω–≥ –∞–Ω–∏–º–µ, —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ –æ–Ω–ª–∞–π–Ω';
        break;
      case 'latest':
      case 'new-anime':
        seoData.title = '–ù–æ–≤—ã–µ –∞–Ω–∏–º–µ - —Å–≤–µ–∂–∏–µ —Ä–µ–ª–∏–∑—ã';
        seoData.description = '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ. –ù–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ. –°–º–æ—Ç—Ä–∏—Ç–µ –æ–Ω–ª–∞–π–Ω –ø–µ—Ä–≤—ã–º–∏.';
        seoData.keywords = '–Ω–æ–≤—ã–µ –∞–Ω–∏–º–µ, —Å–≤–µ–∂–∏–µ —Ä–µ–ª–∏–∑—ã, —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ, –Ω–æ–≤—ã–µ —Å–µ—Ä–∏–∏, –∞–Ω–∏–º–µ 2025';
        break;
      case 'new-episodes':
        seoData.title = '–ù–æ–≤—ã–µ —ç–ø–∏–∑–æ–¥—ã –∞–Ω–∏–º–µ - —Å–≤–µ–∂–∏–µ —Å–µ—Ä–∏–∏';
        seoData.description = '–°–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —ç–ø–∏–∑–æ–¥—ã –∞–Ω–∏–º–µ. –¢–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ–¥—à–∏–µ —Å–µ—Ä–∏–∏. –°–º–æ—Ç—Ä–∏—Ç–µ –æ–Ω–ª–∞–π–Ω –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.';
        seoData.keywords = '–Ω–æ–≤—ã–µ —ç–ø–∏–∑–æ–¥—ã, —Å–≤–µ–∂–∏–µ —Å–µ—Ä–∏–∏, –Ω–æ–≤—ã–µ —Å–µ—Ä–∏–∏ –∞–Ω–∏–º–µ, –∞–Ω–∏–º–µ —Å–µ—Ä–∏–∏, —Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∏';
        break;
      default:
        seoData.title = '–ö–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ - —Å–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ';
        seoData.description = '–ë–æ–ª—å—à–æ–π –∫–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –∏ –≥–æ–¥–æ–≤ –≤—ã–ø—É—Å–∫–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –æ–Ω–ª–∞–π–Ω –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ. –§–∏–ª—å—Ç—Ä—ã –ø–æ –∂–∞–Ω—Ä–∞–º, –≥–æ–¥–∞–º –∏ —Ä–µ–π—Ç–∏–Ω–≥—É.';
        seoData.keywords = '–∫–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ, –∞–Ω–∏–º–µ –æ–Ω–ª–∞–π–Ω, —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ, –∂–∞–Ω—Ä—ã –∞–Ω–∏–º–µ, —Ä–µ–π—Ç–∏–Ω–≥ –∞–Ω–∏–º–µ';
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º Open Graph –¥–∞–Ω–Ω—ã–µ
    seoData.og = {
      ...seoData.og,
      title: seoData.title,
      description: seoData.description,
      image: 'https://anilibria.top/og-image.jpg',
      url: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/catalog/${filter || ''}`,
    };
    
    res.json({
      success: true,
      data: seoData,
    });
    
  } catch (err) {
    console.error('Catalog SEO error:', err);
    
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-–¥–∞–Ω–Ω—ã—Ö',
    });
  }
};