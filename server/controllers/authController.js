const User = require('../models/User');
const { generateToken, generateRefreshToken } = require('../middleware/auth');
const { HTTP_STATUS, ERROR_MESSAGES } = require('../../shared/constants/constants');
const crypto = require('crypto');

class AuthController {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(req, res) {
    try {
      const { username, email, password } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await User.findByEmailOrUsername(email);
      if (existingUser) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          error: {
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
          }
        });
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = new User({
        username,
        email,
        password
      });

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
      const verificationToken = user.createEmailVerificationToken();
      await user.save();

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã
      const accessToken = generateToken(user._id);
      const refreshToken = generateRefreshToken(user._id);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é)
      user.refreshToken = refreshToken;
      await user.save();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
      // await emailService.sendVerificationEmail(user.email, verificationToken);

      res.status(HTTP_STATUS.CREATED).json({
        success: true,
        data: {
          user: {
            id: user._id,
            username: user.username,
            email: user.email,
            role: user.role,
            avatar: user.avatar,
            isEmailVerified: user.isEmailVerified
          },
          tokens: {
            accessToken,
            refreshToken
          }
        },
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      });

    } catch (error) {
      console.error('Registration error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(req, res) {
    try {
      console.log('üîç LOGIN DEBUG - Request body:', req.body);
      console.log('üîç LOGIN DEBUG - Request headers:', req.headers);
      
      const { identifier, password } = req.body;
      console.log('üîç LOGIN DEBUG - Extracted identifier:', identifier);
      console.log('üîç LOGIN DEBUG - Password provided:', !!password);

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ username
      const user = await User.findByEmailOrUsername(identifier);
      console.log('üîç LOGIN DEBUG - User found:', !!user);
      if (user) {
        console.log('üîç LOGIN DEBUG - User details:', {
          id: user._id,
          username: user.username,
          email: user.email,
          isActive: user.isActive
        });
      }
      if (!user) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          error: {
            message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isPasswordValid = await user.comparePassword(password);
      if (!isPasswordValid) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          error: {
            message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!user.isUserActive()) {
        return res.status(HTTP_STATUS.FORBIDDEN).json({
          success: false,
          error: {
            message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
          }
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      const accessToken = generateToken(user._id);
      const refreshToken = generateRefreshToken(user._id);

      // –û–±–Ω–æ–≤–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      user.refreshToken = refreshToken;
      user.lastLogin = new Date();
      await user.save();

      res.json({
        success: true,
        data: {
          user: {
            id: user._id,
            username: user.username,
            email: user.email,
            role: user.role,
            avatar: user.avatar,
            isEmailVerified: user.isEmailVerified,
            preferences: user.preferences
          },
          tokens: {
            accessToken,
            refreshToken
          }
        },
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'
      });

    } catch (error) {
      console.error('Login error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refreshToken(req, res) {
    try {
      const { refreshToken } = req.body;

      if (!refreshToken) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          error: {
            message: 'Refresh —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
          }
        });
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º refresh —Ç–æ–∫–µ–Ω–æ–º
      const user = await User.findOne({ refreshToken });
      if (!user) {
        return res.status(HTTP_STATUS.UNAUTHORIZED).json({
          success: false,
          error: {
            message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω'
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!user.isUserActive()) {
        return res.status(HTTP_STATUS.FORBIDDEN).json({
          success: false,
          error: {
            message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
          }
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      const newAccessToken = generateToken(user._id);
      const newRefreshToken = generateRefreshToken(user._id);

      // –û–±–Ω–æ–≤–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω
      user.refreshToken = newRefreshToken;
      await user.save();

      res.json({
        success: true,
        data: {
          tokens: {
            accessToken: newAccessToken,
            refreshToken: newRefreshToken
          }
        }
      });

    } catch (error) {
      console.error('Refresh token error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(req, res) {
    try {
      const user = await User.findById(req.user.id);
      if (user) {
        // –£–¥–∞–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω
        user.refreshToken = undefined;
        await user.save();
      }

      res.json({
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
      });

    } catch (error) {
      console.error('Logout error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getMe(req, res) {
    try {
      const user = await User.findById(req.user.id)
        .populate('watchLists')
        .select('-password -refreshToken');

      if (!user) {
        return res.status(HTTP_STATUS.NOT_FOUND).json({
          success: false,
          error: {
            message: ERROR_MESSAGES.USER_NOT_FOUND
          }
        });
      }

      res.json({
        success: true,
        data: {
          user
        }
      });

    } catch (error) {
      console.error('Get me error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }

  // –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å
  async forgotPassword(req, res) {
    try {
      const { email } = req.body;

      const user = await User.findOne({ email });
      if (!user) {
        // –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return res.json({
          success: true,
          message: '–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É'
        });
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
      const resetToken = user.createPasswordResetToken();
      await user.save();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)
      // await emailService.sendPasswordResetEmail(user.email, resetToken);

      res.json({
        success: true,
        message: '–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É'
      });

    } catch (error) {
      console.error('Forgot password error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async resetPassword(req, res) {
    try {
      const { token, password } = req.body;

      // –•–µ—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
      const hashedToken = crypto
        .createHash('sha256')
        .update(token)
        .digest('hex');

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
      const user = await User.findOne({
        passwordResetToken: hashedToken,
        passwordResetExpires: { $gt: Date.now() }
      });

      if (!user) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          error: {
            message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω'
          }
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      user.password = password;
      user.passwordResetToken = undefined;
      user.passwordResetExpires = undefined;
      await user.save();

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      const accessToken = generateToken(user._id);
      const refreshToken = generateRefreshToken(user._id);

      user.refreshToken = refreshToken;
      await user.save();

      res.json({
        success: true,
        data: {
          tokens: {
            accessToken,
            refreshToken
          }
        },
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
      });

    } catch (error) {
      console.error('Reset password error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email
  async verifyEmail(req, res) {
    try {
      const { token } = req.params;

      // –•–µ—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
      const hashedToken = crypto
        .createHash('sha256')
        .update(token)
        .digest('hex');

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
      const user = await User.findOne({
        emailVerificationToken: hashedToken,
        emailVerificationExpires: { $gt: Date.now() }
      });

      if (!user) {
        return res.status(HTTP_STATUS.BAD_REQUEST).json({
          success: false,
          error: {
            message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
          }
        });
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
      user.isEmailVerified = true;
      user.emailVerificationToken = undefined;
      user.emailVerificationExpires = undefined;
      await user.save();

      res.json({
        success: true,
        message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      });

    } catch (error) {
      console.error('Verify email error:', error);
      res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({
        success: false,
        error: {
          message: ERROR_MESSAGES.SERVER_ERROR
        }
      });
    }
  }
}

module.exports = new AuthController();