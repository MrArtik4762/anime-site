#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–Ω–∏–º–µ
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 * –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –∏ MongoDB
 */

const logger = require('../utils/logger');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const testAnalyticsSystem = async () => {
  try {
    console.log('\nüöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    const AnalyticsService = require('../services/analyticsService');
    const JobsService = require('../services/jobs');
    
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    
    if (AnalyticsService && JobsService) {
      console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤');
      return false;
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ AnalyticsService
    const requiredMethods = [
      'updateViews', 'getPopularAnime', 'getNewAnime', 'getTrendingAnime',
      'cacheData', 'getCachedData'
    ];
    
    for (const method of requiredMethods) {
      if (typeof AnalyticsService[method] === 'function') {
        console.log(`‚úÖ –ú–µ—Ç–æ–¥ ${method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`‚ùå –ú–µ—Ç–æ–¥ ${method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    const jobMethods = ['start', 'stop'];
    
    for (const method of jobMethods) {
      if (typeof JobsService[method] === 'function') {
        console.log(`‚úÖ –ú–µ—Ç–æ–¥ –∑–∞–¥–∞–Ω–∏—è ${method} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`‚ùå –ú–µ—Ç–æ–¥ –∑–∞–¥–∞–Ω–∏—è ${method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        return false;
      }
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockCacheKey = 'test:anime:1';
    const mockData = { id: 1, name: 'Test Anime', views: 100 };
    
    try {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
      await AnalyticsService.cacheData(mockCacheKey, mockData, 300);
      console.log('‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
      const cachedData = await AnalyticsService.getCachedData(mockCacheKey);
      if (cachedData) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç fallback —Ä–µ–∂–∏–º)');
      }
    } catch (error) {
      console.log('‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Redis:', error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–¥–∞–Ω–∏–π –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      JobsService.start();
      JobsService.stop();
      console.log('‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.log('‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–¥–∞–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Redis:', error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const updateResult = await AnalyticsService.updateViews('test-anime-id', 1);
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ...');
    
    try {
      const popularAnime = await AnalyticsService.getPopularAnime();
      if (Array.isArray(popularAnime)) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${popularAnime.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ`);
      } else {
        console.log('‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ fallback —Ä–µ–∂–∏–º–µ');
      }
    } catch (error) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ...');
    
    try {
      const newAnime = await AnalyticsService.getNewAnime();
      if (Array.isArray(newAnime)) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${newAnime.length} –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ`);
      } else {
        console.log('‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ fallback —Ä–µ–∂–∏–º–µ');
      }
    } catch (error) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∞–Ω–∏–º–µ...');
    
    try {
      const trendingAnime = await AnalyticsService.getTrendingAnime();
      if (Array.isArray(trendingAnime)) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${trendingAnime.length} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∞–Ω–∏–º–µ`);
      } else {
        console.log('‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ fallback —Ä–µ–∂–∏–º–µ');
      }
    } catch (error) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∞–Ω–∏–º–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–æ–≤...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      const catalogRoutes = require('../routes/catalog');
      if (catalogRoutes) {
        console.log('‚úÖ –†–æ—É—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        const endpoints = [
          'GET /api/catalog/popular',
          'GET /api/catalog/new', 
          'GET /api/catalog/trending'
        ];
        
        endpoints.forEach(endpoint => {
          console.log(`‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω`);
        });
      } else {
        console.log('‚ùå –†–æ—É—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return false;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ—É—Ç–æ–≤:', error.message);
      return false;
    }
    
    console.log('\nüìã –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ app.js
      const app = require('../app');
      if (app) {
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (app.analyticsService && app.jobsService) {
          console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –∑–∞–¥–∞–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        } else {
          console.log('‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        }
      } else {
        console.log('‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return false;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
      return false;
    }
    
    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Redis –∏ MongoDB');
    console.log('‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º');
    console.log('‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã');
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    console.log('\nüéâ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    
    return true;
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', { error: error.message, stack: error.stack });
    return false;
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...\n');
  
  testAnalyticsSystem().then(success => {
    if (success) {
      console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
      process.exit(0);
    } else {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã');
      process.exit(1);
    }
  }).catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', { error: error.message, stack: error.stack });
    process.exit(1);
  });
}

module.exports = testAnalyticsSystem;