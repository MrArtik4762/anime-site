#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–Ω–∏–º–µ-—Å–∞–π—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã: API, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const config = {
  baseUrl: 'http://localhost:5000',
  timeout: 10000,
  testUser: {
    username: 'testuser_final',
    email: 'test_final@example.com',
    password: 'TestPass123!'
  }
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
const testResults = {
  passed: 0,
  failed: 0,
  total: 0,
  tests: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logTest(testName, passed, details = '') {
  testResults.total++;
  const status = passed ? '‚úÖ PASS' : '‚ùå FAIL';
  const message = `${status} ${testName}`;
  console.log(message);
  if (details) {
    console.log(`   ${details}`);
  }
  
  testResults.tests.push({
    name: testName,
    passed,
    details,
    timestamp: new Date().toISOString()
  });
  
  if (passed) {
    testResults.passed++;
  } else {
    testResults.failed++;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ-—Å–∞–π—Ç–∞...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await testServerHealth();
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await testDatabaseConnection();
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Redis
    await testRedisConnection();
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    await testApiEndpoints();
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await testAuthentication();
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–Ω–∏–º–µ
    await testAnimeCatalog();
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    await testCaching();
    
    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    await testBackgroundJobs();
    
    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    await testClientConnection();
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    printTestResults();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    process.exit(1);
  }
}

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
async function testServerHealth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await axios.get(`${config.baseUrl}/health`, {
      timeout: config.timeout
    });
    
    if (response.status === 200) {
      logTest('Health check endpoint', true, `–°—Ç–∞—Ç—É—Å: ${response.data.status}`);
    } else {
      logTest('Health check endpoint', false, `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
    }
  } catch (error) {
    logTest('Health check endpoint', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testDatabaseConnection() {
  try {
    console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const response = await axios.get(`${config.baseUrl}/health/simple`, {
      timeout: config.timeout
    });
    
    if (response.data.database === 'connected') {
      logTest('Database connection', true, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      logTest('Database connection', false, `–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${response.data.database}`);
    }
  } catch (error) {
    logTest('Database connection', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
async function testRedisConnection() {
  try {
    console.log('\nüî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...');
    const response = await axios.get(`${config.baseUrl}/health`, {
      timeout: config.timeout
    });
    
    if (response.data.checks && response.data.checks.redis === false) {
      logTest('Redis connection', false, 'Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –≤ degraded —Ä–µ–∂–∏–º–µ)');
    } else if (response.data.checks && response.data.checks.redis === true) {
      logTest('Redis connection', true, 'Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      logTest('Redis connection', false, '–°—Ç–∞—Ç—É—Å Redis –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
    }
  } catch (error) {
    logTest('Redis connection', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function testApiEndpoints() {
  try {
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    const endpoints = [
      { path: '/api', expected: '404' },
      { path: '/api/auth', expected: '404' },
      { path: '/api/catalog', expected: '404' },
      { path: '/api/anime', expected: '500' }, // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ MongoDB
    ];
    
    for (const endpoint of endpoints) {
      try {
        const response = await axios.get(`${config.baseUrl}${endpoint.path}`, {
          timeout: 5000
        });
        
        if (endpoint.expected === String(response.status)) {
          logTest(`Endpoint ${endpoint.path}`, true, `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        } else {
          logTest(`Endpoint ${endpoint.path}`, false, `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å ${endpoint.expected}, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
        }
      } catch (error) {
        if (error.response && error.response.status === parseInt(endpoint.expected)) {
          logTest(`Endpoint ${endpoint.path}`, true, `–°—Ç–∞—Ç—É—Å: ${error.response.status} (–æ–∂–∏–¥–∞–µ–º–æ)`);
        } else {
          logTest(`Endpoint ${endpoint.path}`, false, `–û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }
  } catch (error) {
    logTest('API endpoints test', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuthentication() {
  try {
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const registerResponse = await axios.post(`${config.baseUrl}/api/auth/register`, config.testUser, {
        headers: { 'Content-Type': 'application/json' },
        timeout: config.timeout
      });
      
      if (registerResponse.data.success) {
        logTest('User registration', true, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      } else {
        logTest('User registration', false, `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registerResponse.data.error?.message}`);
      }
    } catch (error) {
      if (error.response && error.response.data && error.response.data.error?.code === 'USER_ALREADY_EXISTS') {
        logTest('User registration', true, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç)');
      } else {
        logTest('User registration', false, `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
      }
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const loginResponse = await axios.post(`${config.baseUrl}/api/auth/login`, {
        email: config.testUser.email,
        password: config.testUser.password
      }, {
        headers: { 'Content-Type': 'application/json' },
        timeout: config.timeout
      });
      
      if (loginResponse.data.success) {
        logTest('User login', true, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (loginResponse.data.data && loginResponse.data.data.accessToken) {
          const authHeader = { Authorization: `Bearer ${loginResponse.data.data.accessToken}` };
          const meResponse = await axios.get(`${config.baseUrl}/api/auth/me`, {
            headers: authHeader,
            timeout: config.timeout
          });
          
          if (meResponse.data.success) {
            logTest('Get user profile', true, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          } else {
            logTest('Get user profile', false, `–û—à–∏–±–∫–∞: ${meResponse.data.error?.message}`);
          }
        }
      } else {
        logTest('User login', false, `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${loginResponse.data.error?.message}`);
      }
    } catch (error) {
      logTest('User login', false, `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
    }
  } catch (error) {
    logTest('Authentication test', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–Ω–∏–º–µ
async function testAnimeCatalog() {
  try {
    console.log('\nüì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–Ω–∏–º–µ...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–∞–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞)
    try {
      const response = await axios.get(`${config.baseUrl}/api/catalog/new`, {
        timeout: config.timeout
      });
      
      if (response.data.success) {
        logTest('New anime catalog', true, `–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ: ${response.data.data?.length || 0}`);
      } else {
        logTest('New anime catalog', false, `–û—à–∏–±–∫–∞: ${response.data.error?.message}`);
      }
    } catch (error) {
      if (error.code === 'ECONNRESET') {
        logTest('New anime catalog', false, '–°–µ—Ä–≤–µ—Ä —É–ø–∞–ª –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É (–∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞)');
      } else {
        logTest('New anime catalog', false, `–û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
    try {
      const response = await axios.get(`${config.baseUrl}/api/anime/popular`, {
        timeout: config.timeout
      });
      
      if (response.data.success) {
        logTest('Popular anime', true, `–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ: ${response.data.data?.length || 0}`);
      } else {
        logTest('Popular anime', false, `–û—à–∏–±–∫–∞: ${response.data.error?.message}`);
      }
    } catch (error) {
      logTest('Popular anime', false, `–û—à–∏–±–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, MongoDB): ${error.message}`);
    }
  } catch (error) {
    logTest('Anime catalog test', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
async function testCaching() {
  try {
    console.log('\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫—ç—à–∞ —á–µ—Ä–µ–∑ health check
    const response = await axios.get(`${config.baseUrl}/health`, {
      timeout: config.timeout
    });
    
    if (response.data.checks && response.data.checks.storage === true) {
      logTest('Storage cache', true, '–°–∏—Å—Ç–µ–º–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
    } else {
      logTest('Storage cache', false, '–°–∏—Å—Ç–µ–º–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –∫—ç—à–∞
    if (response.data.checks && response.data.checks.redis === false) {
      logTest('Redis cache', false, 'Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è memory cache)');
    } else if (response.data.checks && response.data.checks.redis === true) {
      logTest('Redis cache', true, 'Redis –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      logTest('Redis cache', false, '–°—Ç–∞—Ç—É—Å Redis –∫—ç—à–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
    }
  } catch (error) {
    logTest('Caching test', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
async function testBackgroundJobs() {
  try {
    console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    const response = await axios.get(`${config.baseUrl}/health`, {
      timeout: config.timeout
    });
    
    if (response.status === 200) {
      logTest('Background jobs service', true, '–°–µ—Ä–≤–∏—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      logTest('Background jobs service', false, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á');
    }
  } catch (error) {
    logTest('Background jobs test', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function testClientConnection() {
  try {
    console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
    try {
      const clientResponse = await axios.get('http://localhost:3000', {
        timeout: 5000
      });
      
      if (clientResponse.status === 200) {
        logTest('Client development server', true, '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        logTest('Client development server', false, `–°—Ç–∞—Ç—É—Å: ${clientResponse.status}`);
      }
    } catch (error) {
      logTest('Client development server', false, '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    const clientPath = path.join(__dirname, '../../client/dist');
    if (fs.existsSync(clientPath)) {
      logTest('Client build', true, '–°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      logTest('Client build', false, '–°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    logTest('Client connection test', false, `–û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function printTestResults() {
  console.log('\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('='.repeat(50));
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.total}`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failed}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((testResults.passed / testResults.total) * 100).toFixed(1)}%`);
  console.log('='.repeat(50));
  
  if (testResults.failed > 0) {
    console.log('\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
    testResults.tests
      .filter(test => !test.passed)
      .forEach(test => {
        console.log(`  ‚Ä¢ ${test.name}: ${test.details}`);
      });
  }
  
  console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ: test-results.json');
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
  const resultsPath = path.join(__dirname, 'test-results.json');
  fs.writeFileSync(resultsPath, JSON.stringify(testResults, null, 2));
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
  const successRate = testResults.passed / testResults.total;
  let systemStatus = 'üü° –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞';
  
  if (successRate >= 0.8) {
    systemStatus = 'üü¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞';
  } else if (successRate < 0.4) {
    systemStatus = 'üî¥ –¢—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
  }
  
  console.log(`\nüéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: ${systemStatus}`);
  
  process.exit(testResults.failed > 0 ? 1 : 0);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { runTests, testResults };