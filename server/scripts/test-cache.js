#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Redis –∏ –≤ –ø–∞–º—è—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const fs = require('fs').promises;
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–æ–≥–≥–µ—Ä
const cacheService = require('../services/cacheService');
const { logger } = require('../utils/logger');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  anime: [
    { id: 1, title: '–¢–µ—Å—Ç–æ–≤–æ–µ –∞–Ω–∏–º–µ 1', year: 2023 },
    { id: 2, title: '–¢–µ—Å—Ç–æ–≤–æ–µ –∞–Ω–∏–º–µ 2', year: 2024 }
  ],
  episodes: [
    { id: 1, animeId: 1, title: '–≠–ø–∏–∑–æ–¥ 1', number: 1 },
    { id: 2, animeId: 1, title: '–≠–ø–∏–∑–æ–¥ 2', number: 2 }
  ],
  search: '—Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫',
  popular: { count: 10, items: ['anime1', 'anime2'] }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—É–∑—ã
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runCacheTests() {
  logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  try {
    // 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    logger.info('üì° –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...');
    const connectionStatus = await cacheService.testConnection();
    logger.info(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${connectionStatus.connected ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å'}`);
    
    if (connectionStatus.connected) {
      logger.info(`üîå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${connectionStatus.type === 'redis' ? 'Redis' : 'NodeCache (—Ä–µ–∑–µ—Ä–≤)'}`);
    } else {
      logger.warn('‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ NodeCache');
    }
    
    // 2. –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info('\nüîß –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –¢–µ—Å—Ç set/get
    const testKey = 'test:basic';
    await cacheService.set(testKey, testData.anime, 60);
    logger.info(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –ø–æ –∫–ª—é—á—É: ${testKey}`);
    
    sleep(500).then(async () => {
      const cachedData = await cacheService.get(testKey);
      if (cachedData && cachedData.length === testData.anime.length) {
        logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
      } else {
        logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞');
      }
    });
    
    await sleep(1000);
    
    // 3. –¢–µ—Å—Ç TTL
    logger.info('\n‚è±Ô∏è  –¢–µ—Å—Ç TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞)...');
    const ttlKey = 'test:ttl';
    const shortTTL = 2; // 2 —Å–µ–∫—É–Ω–¥—ã
    
    await cacheService.set(ttlKey, testData.episodes, shortTTL);
    logger.info(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å TTL ${shortTTL} —Å–µ–∫—É–Ω–¥`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let exists = await cacheService.get(ttlKey);
    if (exists) {
      logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    } else {
      logger.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
    
    // –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
    await sleep((shortTTL + 1) * 1000);
    
    exists = await cacheService.get(ttlKey);
    if (!exists) {
      logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL');
    } else {
      logger.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL');
    }
    
    // 4. –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    logger.info('\nüéØ –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ
    await cacheService.cacheAnime(testData.anime[0], testData.anime[0].id);
    const cachedAnime = await cacheService.getAnime(testData.anime[0].id);
    if (cachedAnime && cachedAnime.id === testData.anime[0].id) {
      logger.info('‚úÖ –ú–µ—Ç–æ–¥ cacheAnime/getAnime —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      logger.error('‚ùå –ú–µ—Ç–æ–¥ cacheAnime/getAnime –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–æ–≤
    await cacheService.cacheEpisodes(testData.episodes, testData.anime[0].id);
    const cachedEpisodes = await cacheService.getEpisodes(testData.anime[0].id);
    if (cachedEpisodes && cachedEpisodes.length === testData.episodes.length) {
      logger.info('‚úÖ –ú–µ—Ç–æ–¥ cacheEpisodes/getEpisodes —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      logger.error('‚ùå –ú–µ—Ç–æ–¥ cacheEpisodes/getEpisodes –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
    await cacheService.cachePopularAnime(testData.anime);
    const cachedPopular = await cacheService.getPopularAnime();
    if (cachedPopular && cachedPopular.length === testData.anime.length) {
      logger.info('‚úÖ –ú–µ—Ç–æ–¥ cachePopularAnime/getPopularAnime —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      logger.error('‚ùå –ú–µ—Ç–æ–¥ cachePopularAnime/getPopularAnime –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    await cacheService.cacheSearch(testData.anime, testData.search);
    const cachedSearch = await cacheService.getSearch(testData.search);
    if (cachedSearch && cachedSearch.length === testData.anime.length) {
      logger.info('‚úÖ –ú–µ—Ç–æ–¥ cacheSearch/getSearch —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      logger.error('‚ùå –ú–µ—Ç–æ–¥ cacheSearch/getSearch –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // 5. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    logger.info('\nüóëÔ∏è  –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    await cacheService.invalidateAnimeCache(testData.anime[0].id);
    const deletedAnime = await cacheService.getAnime(testData.anime[0].id);
    if (!deletedAnime) {
      logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
    } else {
      logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
    
    // 6. –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    logger.info('\nüßπ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...');
    await cacheService.clear();
    logger.info('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω');
    
    // 7. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    logger.info('\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    const perfKey = 'test:performance';
    const iterations = 100;
    
    const startTime = Date.now();
    
    for (let i = 0; i < iterations; i++) {
      await cacheService.set(perfKey, { iteration: i, data: testData.anime }, 60);
      await cacheService.get(perfKey);
    }
    
    const endTime = Date.now();
    const avgTime = (endTime - startTime) / iterations;
    
    logger.info(`‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${avgTime.toFixed(2)} –º—Å (${iterations} –æ–ø–µ—Ä–∞—Ü–∏–π)`);
    
    // 8. –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
    logger.info('\nüè∑Ô∏è  –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏...');
    const prefixedKey = cacheService.generateKey('test', 'catalog');
    await cacheService.set('test', testData.anime, 60, 'catalog');
    const prefixedData = await cacheService.get('test', 'catalog');
    
    if (prefixedData && prefixedData.length === testData.anime.length) {
      logger.info('‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      logger.error('‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    logger.info('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // 9. –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await cacheService.getStats();
    logger.info('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:');
    logger.info(`   - Redis —Å—Ç–∞—Ç—É—Å: ${stats.redis}`);
    logger.info(`   - Fallback —Å—Ç–∞—Ç—É—Å: ${stats.fallback || '–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    logger.info(`   - –°—Ç–∞—Ç—É—Å: ${stats.status}`);
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
  
  logger.info('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  logger.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runCacheTests();
}

module.exports = { runCacheTests };