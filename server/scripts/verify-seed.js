const knex = require('knex');
const knexfile = require('../knexfile');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Knex
const db = knex(knexfile.development);

async function verifySeed() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–¥–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const countResult = await db('animes').count('id as count');
    const totalCount = countResult[0].count;
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –∞–Ω–∏–º–µ: ${totalCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º
    const typeCounts = await db('animes')
      .select('type')
      .count('id as count')
      .groupBy('type');
    
    console.log('\nüìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:');
    typeCounts.forEach(item => {
      console.log(`  ${item.type}: ${item.count}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –≥–æ–¥–∞–º
    const yearCounts = await db('animes')
      .select('year')
      .count('id as count')
      .groupBy('year')
      .orderBy('year', 'desc');
    
    console.log('\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º:');
    yearCounts.forEach(item => {
      console.log(`  ${item.year}: ${item.count}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
    const recentAnimes = await db('animes')
      .select('title', 'type', 'year', 'rating_score', 'episodes')
      .orderBy('created_at', 'desc')
      .limit(5);
    
    console.log('\nüé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ:');
    recentAnimes.forEach((anime, index) => {
      console.log(`  ${index + 1}. ${anime.title} (${anime.type}, ${anime.year}) - –†–µ–π—Ç–∏–Ω–≥: ${anime.rating_score}, –°–µ—Ä–∏–π: ${anime.episodes}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–µ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    const topRated = await db('animes')
      .select('title', 'type', 'year', 'rating_score')
      .where('rating_score', '>', 8.5)
      .orderBy('rating_score', 'desc')
      .limit(5);
    
    if (topRated.length > 0) {
      console.log('\n‚≠ê –ê–Ω–∏–º–µ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (>8.5):');
      topRated.forEach((anime, index) => {
        console.log(`  ${index + 1}. ${anime.title} (${anime.type}, ${anime.year}) - ${anime.rating_score}`);
      });
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–¥–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–¥–∏–Ω–≥–∞:', error);
  } finally {
    await db.destroy();
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
verifySeed();