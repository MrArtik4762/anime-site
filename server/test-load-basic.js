const SourcesFetcher = require('./services/sourcesFetcher');
const { performance } = require('perf_hooks');

async function runBasicLoadTests() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    console.log('\nüîç –¢–µ—Å—Ç 1: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (20 –∑–∞–ø—Ä–æ—Å–æ–≤)');
    const sequentialStart = performance.now();
    const sequentialResults = [];
    
    for (let i = 0; i < 20; i++) {
      const start = performance.now();
      try {
        const result = await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
          providers: ['anilibria', 'shikimori'],
          enableRetry: false
        });
        const end = performance.now();
        sequentialResults.push(end - start);
        
        if (i % 5 === 0) {
          console.log(`   –ó–∞–ø—Ä–æ—Å ${i + 1}: ${(end - start).toFixed(2)}ms, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${result.total}`);
        }
      } catch (error) {
        const end = performance.now();
        sequentialResults.push(end - start);
        console.log(`   –ó–∞–ø—Ä–æ—Å ${i + 1}: ${(end - start).toFixed(2)}ms, –æ—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    const sequentialEnd = performance.now();
    const sequentialAvg = sequentialResults.reduce((a, b) => a + b, 0) / sequentialResults.length;
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`);
    console.log(`   - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(sequentialEnd - sequentialStart).toFixed(2)}ms`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${sequentialAvg.toFixed(2)}ms`);
    console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${Math.min(...sequentialResults).toFixed(2)}ms`);
    console.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${Math.max(...sequentialResults).toFixed(2)}ms`);
    console.log(`   - –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${(20 / ((sequentialEnd - sequentialStart) / 1000)).toFixed(2)}`);
    
    // –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)');
    const parallelStart = performance.now();
    const parallelPromises = [];
    
    for (let i = 0; i < 10; i++) {
      parallelPromises.push(
        SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
          providers: ['anilibria', 'jikan'],
          enableRetry: false
        }).catch(error => ({ error: error.message }))
      );
    }
    
    const parallelResults = await Promise.all(parallelPromises);
    const parallelEnd = performance.now();
    
    const successfulRequests = parallelResults.filter(r => !r.error).length;
    const failedRequests = parallelResults.filter(r => r.error).length;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`);
    console.log(`   - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(parallelEnd - parallelStart).toFixed(2)}ms`);
    console.log(`   - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successfulRequests}`);
    console.log(`   - –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${failedRequests}`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${(parallelEnd - parallelStart) / successfulRequests || 0}ms`);
    console.log(`   - –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${(successfulRequests / ((parallelEnd - parallelStart) / 1000)).toFixed(2)}`);
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
    const cacheStart = performance.now();
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
    const firstResult = await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
      providers: ['anilibria'],
      enableCache: true,
      enableRetry: false
    });
    
    const firstEnd = performance.now();
    const firstTime = firstEnd - cacheStart;
    
    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)
    const secondStart = performance.now();
    const secondResult = await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
      providers: ['anilibria'],
      enableCache: true,
      enableRetry: false
    });
    const secondEnd = performance.now();
    const secondTime = secondEnd - secondStart;
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    console.log(`   - –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞): ${firstTime.toFixed(2)}ms`);
    console.log(`   - –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞): ${secondTime.toFixed(2)}ms`);
    console.log(`   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${firstTime > 0 ? (firstTime / secondTime).toFixed(2) : '‚àû'}x`);
    
    // –¢–µ—Å—Ç 4: –ù–∞–≥—Ä—É–∑–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    console.log('\nüîç –¢–µ—Å—Ç 4: –ù–∞–≥—Ä—É–∑–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏');
    const providersTestStart = performance.now();
    
    const providerTests = [
      { name: 'anilibria', providers: ['anilibria'] },
      { name: 'shikimori', providers: ['shikimori'] },
      { name: 'jikan', providers: ['jikan'] },
      { name: 'all', providers: ['anilibria', 'shikimori', 'jikan'] }
    ];
    
    for (const test of providerTests) {
      const testStart = performance.now();
      try {
        const result = await SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
          providers: test.providers,
          enableRetry: false
        });
        const testEnd = performance.now();
        console.log(`   - ${test.name}: ${(testEnd - testStart).toFixed(2)}ms, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${result.total}`);
      } catch (error) {
        const testEnd = performance.now();
        console.log(`   - ${test.name}: ${(testEnd - testStart).toFixed(2)}ms, –æ—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    const providersTestEnd = performance.now();
    console.log(`   - –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${(providersTestEnd - providersTestStart).toFixed(2)}ms`);
    
    // –¢–µ—Å—Ç 5: –ëurst –Ω–∞–≥—Ä—É–∑–∫–∞
    console.log('\nüîç –¢–µ—Å—Ç 5: –ëurst –Ω–∞–≥—Ä—É–∑–∫–∞ (5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥)');
    const burstStart = performance.now();
    const burstPromises = [];
    
    for (let i = 0; i < 5; i++) {
      burstPromises.push(
        SourcesFetcher.getEpisodeSources('50d4b7663de0007e5d000003', {
          providers: ['shikimori'],
          enableRetry: false
        })
      );
    }
    
    await Promise.all(burstPromises);
    const burstEnd = performance.now();
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã burst —Ç–µ—Å—Ç–∞:`);
    console.log(`   - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(burstEnd - burstStart).toFixed(2)}ms`);
    console.log(`   - –ó–∞–ø—Ä–æ—Å–æ–≤: 5`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${(burstEnd - burstStart) / 5}ms`);
    
    console.log('\n‚úÖ –ë–∞–∑–æ–≤–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runBasicLoadTests();