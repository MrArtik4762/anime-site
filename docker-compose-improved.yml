version: '3.8'
services:
  # PostgreSQL база данных - улучшенная версия
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      # Database configuration with improved security and maintainability
      POSTGRES_USER: ${POSTGRES_USER:-anime_user}  # Более безопасное имя пользователя по умолчанию
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}      # Убрано значение по умолчанию для безопасности
      POSTGRES_DB: ${POSTGRES_DB:-anime_site_db}   # Более описательное имя БД
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"  # Усиленная аутентификация
      PGDATA: /var/lib/postgresql/data/pgdata
      
      # Security enhancement: Force password usage in production
      # В продакшене POSTGRES_PASSWORD должен быть обязательным
      
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./server/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro  # Добавлен только для чтения
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-anime_user} -d ${POSTGRES_DB:-anime_site_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s  # Дополнительное время для первоначального запуска
    networks:
      - anime-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis для кеширования и сессий
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redisdata:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - anime-network

  # Frontend (Next.js приложение)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8080
    ports:
      - "${CLIENT_PORT:-3000}:80"
    depends_on:
      - nginx
    networks:
      - anime-network

  # Backend API сервер
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      ANILIBERTY_API_BASE: ${ANILIBERTY_API_BASE:-"https://anilibria.top/api"}
      REDIS_URL: ${REDIS_URL:-"redis://:${REDIS_PASSWORD:-}@redis:6379"}
      DATABASE_URL: ${DATABASE_URL:-"postgresql://${POSTGRES_USER:-anime_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-anime_site_db}"}
      PROXY_WHITELIST: ${PROXY_WHITELIST:-"anilibria.top,anilibria.cc,cdn.anilibria.tv"}
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-"*"}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${SERVER_PORT:-5000}:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - anime-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
      - "${NGINX_HTTPS_PORT:-8443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
    networks:
      - anime-network

  # HLS Media Server (для обработки видео)
  hls:
    image: ant-media-server/ant-media-server-ce:latest
    restart: unless-stopped
    ports:
      - "1935:1935"  # RTMP
      - "8080:8080"  # WebRTC
      - "8888:8888"  # HLS
    volumes:
      - hlsdata:/usr/local/antmedia/webapps/root
    networks:
      - anime-network

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local
  hlsdata:
    driver: local

networks:
  anime-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16