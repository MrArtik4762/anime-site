import { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { useInfiniteCatalog, useSearchAnime } from '../query/hooks/useCatalog';
import { Container, Grid, LoadingSpinner } from '../styles/GlobalStyles';
import AnimeCard from '../components/anime/AnimeCard';
import AdvancedSearchBar from '../components/common/AdvancedSearchBar';
import AdvancedFilterPanel from '../components/common/AdvancedFilterPanel';

const CatalogContainer = styled.div`
  min-height: 100vh;
  padding: 80px 0 40px;
  background: ${props => props.theme.colors.background};
`;

const Header = styled.div`
  margin-bottom: 40px;
`;

const Title = styled.h1`
  font-size: 2.5rem;
  font-weight: 700;
  color: ${props => props.theme.colors.text};
  margin-bottom: 16px;
`;

const Subtitle = styled.p`
  color: ${props => props.theme.colors.textSecondary};
  font-size: 1.1rem;
  margin-bottom: 32px;
`;

const FiltersSection = styled.div`
  margin-bottom: 40px;
`;

const ResultsHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
`;

const ResultsCount = styled.p`
  color: ${props => props.theme.colors.textSecondary};
  font-size: 0.9rem;
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
`;

const ErrorMessage = styled.div`
  text-align: center;
  color: ${props => props.theme.colors.error};
  padding: 40px;
  font-size: 1.1rem;
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 60px 20px;
  color: ${props => props.theme.colors.textSecondary};
`;

const LoadMoreButton = styled.button`
  display: block;
  margin: 20px auto;
  padding: 12px 24px;
  background: ${props => props.theme.colors.primary};
  color: white;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  font-size: 0.875rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  
  &:hover {
    background: ${props => props.theme.colors.primaryDark};
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const CatalogPage = ({ filter }) => {
  const location = useLocation();
  const navigate = useNavigate();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    genre: [],
    year: '',
    status: '',
    rating: '',
    sortBy: 'rating',
    sortOrder: 'desc',
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const query = searchParams.get('search') || '';
    
    const urlFilters = {
      genre: searchParams.get('genre') ? searchParams.get('genre').split(',') : [],
      year: searchParams.get('year') || '',
      status: searchParams.get('status') || '',
      rating: searchParams.get('rating') || '',
      sortBy: searchParams.get('sortBy') || 'rating',
      sortOrder: searchParams.get('sortOrder') || 'desc',
    };
    
    setSearchQuery(query);
    setFilters(urlFilters);
  }, [location.search]);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ö—É–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const {
    data: searchData,
    isLoading: searchLoading,
    error: searchError,
  } = useSearchAnime(searchQuery, 1, filters);
  
  const {
    data: catalogData,
    isLoading: catalogLoading,
    error: catalogError,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
  } = useInfiniteCatalog({
    filter,
    search: searchQuery || undefined,
    filters
  });
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å, –∏–Ω–∞—á–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞
  const data = searchQuery ? searchData : catalogData;
  const isLoadingData = searchQuery ? searchLoading : catalogLoading;
  const errorData = searchQuery ? searchError : catalogError;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('üîç [CatalogPage] –°–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    searchQuery,
    hasSearchData: !!searchData,
    hasCatalogData: !!catalogData,
    isLoadingData,
    hasError: !!errorData,
    dataLength: data?.data?.length || 0,
    pagination: {
      currentPage: data?.pagination?.currentPage,
      totalPages: data?.pagination?.totalPages,
      totalCount: data?.pagination?.totalCount
    },
    error: errorData?.message || '–ù–µ—Ç –æ—à–∏–±–∫–∏'
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const loadMore = async () => {
    if (hasNextPage && !isFetchingNextPage) {
      try {
        await fetchNextPage();
      } catch (error) {
        console.error('Error loading more:', error);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const updateUrl = (page, query, filterValues) => {
    const searchParams = new URLSearchParams();
    
    if (query) {
      searchParams.set('search', query);
    }
    
    if (page > 1) {
      searchParams.set('page', page.toString());
    }
    
    if (filterValues.genre && filterValues.genre.length > 0) {
      searchParams.set('genre', filterValues.genre.join(','));
    }
    if (filterValues.year) {
      searchParams.set('year', filterValues.year);
    }
    if (filterValues.status) {
      searchParams.set('status', filterValues.status);
    }
    if (filterValues.rating) {
      searchParams.set('rating', filterValues.rating);
    }
    if (filterValues.sortBy && filterValues.sortBy !== 'rating') {
      searchParams.set('sortBy', filterValues.sortBy);
    }
    if (filterValues.sortOrder && filterValues.sortOrder !== 'desc') {
      searchParams.set('sortOrder', filterValues.sortOrder);
    }
    
    const newUrl = `${location.pathname}${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;
    navigate(newUrl, { replace: true });
  };

  const handleSearch = (query) => {
    setSearchQuery(query);
    updateUrl(1, query, filters);
  };

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    updateUrl(1, searchQuery, newFilters);
  };

  const getPageTitle = () => {
    switch (filter) {
      case 'popular':
        return '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ';
      case 'latest':
        return '–ù–æ–≤—ã–µ –∞–Ω–∏–º–µ';
      case 'new-episodes':
        return '–ù–æ–≤—ã–µ —ç–ø–∏–∑–æ–¥—ã';
      default:
        return '–ö–∞—Ç–∞–ª–æ–≥ –∞–Ω–∏–º–µ';
    }
  };

  const getPageSubtitle = () => {
    switch (filter) {
      case 'popular':
        return '–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ –≤—ã—Å–æ–∫–æ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–Ω–∏–º–µ';
      case 'latest':
        return '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ';
      case 'new-episodes':
        return '–°–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —ç–ø–∏–∑–æ–¥—ã –∞–Ω–∏–º–µ';
      default:
        return '–ù–∞–π–¥–∏—Ç–µ –∞–Ω–∏–º–µ –ø–æ —Å–≤–æ–µ–º—É –≤–∫—É—Å—É';
    }
  };

  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
  if (errorData) {
    return (
      <CatalogContainer>
        <Container>
          <ErrorMessage>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {errorData.message}</ErrorMessage>
        </Container>
      </CatalogContainer>
    );
  }

  return (
    <CatalogContainer>
      <Container>
        <Header>
          <Title>{getPageTitle()}</Title>
          <Subtitle>{getPageSubtitle()}</Subtitle>
          {!filter && <AdvancedSearchBar onSearch={handleSearch} />}
        </Header>

        {!filter && (
          <FiltersSection>
            <AdvancedFilterPanel 
              filters={filters} 
              onFilterChange={handleFilterChange} 
              resultCount={data?.pagination?.totalCount || 0}
            />
          </FiltersSection>
        )}

        <ResultsHeader>
          <ResultsCount>
            {isLoadingData ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `–ù–∞–π–¥–µ–Ω–æ: ${data?.pagination?.totalCount || 0} –∞–Ω–∏–º–µ`}
          </ResultsCount>
        </ResultsHeader>

        {isLoadingData ? (
          <LoadingContainer>
            <LoadingSpinner size="48px" />
          </LoadingContainer>
        ) : data?.data && data.data.length > 0 ? (
          <Grid minWidth="250px" gap="20px">
            {data.data.map((anime) => (
              <AnimeCard key={anime.id} anime={anime} />
            ))}
          </Grid>
        ) : (
          <EmptyState>
            <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
          </EmptyState>
        )}
        
        {!isLoadingData && hasNextPage && data?.data && data.data.length > 0 && (
          <LoadMoreButton onClick={loadMore} disabled={isFetchingNextPage}>
            {isFetchingNextPage ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ'}
          </LoadMoreButton>
        )}
      </Container>
    </CatalogContainer>
  );
};

export default CatalogPage;