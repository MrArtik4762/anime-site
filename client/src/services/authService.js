import api from './api';

// In-memory storage for tokens
let accessToken = null;

export const authService = {
  // Set access token in memory
  setToken(token) {
    accessToken = token;
  },

  // Get access token from memory
  getToken() {
    return accessToken;
  },

  // Clear access token
  clearToken() {
    accessToken = null;
  },

  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async login(credentials) {
    try {
      const response = await api.post('/auth/login', credentials, {
        credentials: 'include',
      });
      
      // Store token in memory
      if (response.data.tokens?.accessToken) {
        this.setToken(response.data.tokens.accessToken);
      }
      
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(userData) {
    try {
      const response = await api.post('/auth/register', userData, {
        credentials: 'include',
      });
      
      // Store token in memory
      if (response.data.tokens?.accessToken) {
        this.setToken(response.data.tokens.accessToken);
      }
      
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refresh() {
    console.log('üîÑ [CLIENT] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞...');
    console.log('üîÑ [CLIENT] Cookie presence:', document.cookie.includes('refreshToken'));
    console.log('üîÑ [CLIENT] Document cookie:', document.cookie);
    
    try {
      const response = await api.post('/auth/refresh', {}, {
        credentials: 'include',
      });
      
      console.log('‚úÖ [CLIENT] Access —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
        hasNewToken: !!response.data.tokens?.accessToken,
        timestamp: new Date().toISOString()
      });
      
      // Store new token in memory
      if (response.data.tokens?.accessToken) {
        this.setToken(response.data.tokens.accessToken);
      }
      
      return response.data;
    } catch (error) {
      console.error('‚ùå [CLIENT] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access —Ç–æ–∫–µ–Ω–∞:', {
        error: error.message,
        status: error.response?.status,
        data: error.response?.data,
        timestamp: new Date().toISOString()
      });
      
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser() {
    try {
      const response = await api.get('/auth/me', {
        credentials: 'include',
      });
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  async updateProfile(userData) {
    try {
      const response = await api.put('/users/profile', userData, {
        credentials: 'include',
      });
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
  async changePassword(passwordData) {
    try {
      const response = await api.put('/users/change-password', passwordData, {
        credentials: 'include',
      });
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
  async uploadAvatar(formData) {
    try {
      const response = await api.post('/users/avatar', formData, {
        credentials: 'include',
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  async forgotPassword(email) {
    try {
      const response = await api.post('/auth/forgot-password', { email });
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async resetPassword(token, newPassword) {
    try {
      const response = await api.post('/auth/reset-password', {
        token,
        password: newPassword,
      });
      return response.data;
    } catch (error) {
      const errorMessage = this._handleError(error);
      throw new Error(errorMessage);
    }
  },

  // –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  async logout() {
    try {
      await api.post('/auth/logout', {}, {
        credentials: 'include',
      });
    } catch (error) {
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è
      console.warn('Logout request failed:', error);
    } finally {
      // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
      this.clearToken();
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
  _handleError(error) {
    if (!error.response) {
      return '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
    }

    const { status, data } = error.response;

    switch (status) {
      case 400:
        return data?.message || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞';
      case 401:
        return data?.message || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
      case 403:
        return data?.message || '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
      case 404:
        return data?.message || '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
      case 429:
        return data?.message || '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      case 500:
        return data?.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
      default:
        return data?.message || `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (${status})`;
    }
  },
};
