import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import axios from 'axios';

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ–∑–≤—É—á–µ–∫
const VoiceSelectorContainer = styled.div`
  margin: 15px 0;
  padding: 10px;
  border-radius: 8px;
  background-color: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–∑–≤—É—á–µ–∫
const VoiceButtonsContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  align-items: center;
`;

// –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–∑–≤—É—á–∫–∏
const VoiceButton = styled.button`
  padding: 8px 15px;
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 20px;
  background-color: ${props => props.active ? 
    props.theme?.colors?.primary || '#4285f4' : 
    'rgba(255, 255, 255, 0.1)'};
  color: ${props => props.active ? 'white' : 'rgba(255, 255, 255, 0.9)'};
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
  font-weight: 500;
  white-space: nowrap;
  display: flex;
  align-items: center;
  gap: 6px;
  min-height: 36px;

  &:hover {
    background-color: ${props => props.active ? 
      props.theme?.colors?.primaryDark || '#3367d6' : 
      'rgba(255, 255, 255, 0.2)'};
    border-color: ${props => props.theme?.colors?.primary || '#4285f4'};
    transform: translateY(-1px);
  }

  &:active {
    transform: translateY(0);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .voice-icon {
    font-size: 16px;
  }

  .voice-name {
    flex: 1;
  }

  @media (max-width: 768px) {
    padding: 6px 12px;
    font-size: 13px;
    
    .voice-icon {
      font-size: 14px;
    }
  }
`;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
const VoiceLoadingContainer = styled.div`
  padding: 10px;
  text-align: center;
  font-style: italic;
  color: rgba(255, 255, 255, 0.6);
  font-size: 14px;
`;

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
const VoiceErrorContainer = styled.div`
  padding: 10px;
  text-align: center;
  color: #ff6b6b;
  font-size: 14px;
  background-color: rgba(255, 107, 107, 0.1);
  border: 1px solid rgba(255, 107, 107, 0.3);
  border-radius: 6px;
`;

// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
const VoiceSelectorTitle = styled.div`
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  color: rgba(255, 255, 255, 0.7);
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  gap: 6px;

  .title-icon {
    font-size: 14px;
  }
`;

const VoiceSelector = ({ 
  episodeId, 
  selectedVoice, 
  onVoiceChange,
  className,
  style,
  disabled = false 
}) => {
  const [voices, setVoices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
  const FALLBACK_VOICES = [
    { 
      id: 1, 
      name: '–ì–æ–ª–æ—Å 1',
      language: 'RU',
      type: 'dub',
      studio: 'AniLibria',
      quality: 'high'
    },
    { 
      id: 2, 
      name: '–ì–æ–ª–æ—Å 2', 
      language: 'RU',
      type: 'dub',
      studio: 'AniDub',
      quality: 'medium'
    },
    { 
      id: 3, 
      name: '–ì–æ–ª–æ—Å 3',
      language: 'JP',
      type: 'original',
      studio: 'Original',
      quality: 'high'
    },
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∑–≤—É—á–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ episodeId
  useEffect(() => {
    if (episodeId) {
      fetchVoices();
    }
  }, [episodeId]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (episodeId && voices.length > 0) {
      const savedVoice = localStorage.getItem(`voicePreference_${episodeId}`);
      if (savedVoice) {
        try {
          const parsedVoice = JSON.parse(savedVoice);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
          const voiceExists = voices.find(v => v.id === parsedVoice.id);
          if (voiceExists) {
            onVoiceChange?.(parsedVoice);
          }
        } catch (err) {
          console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –æ–∑–≤—É—á–∫–∏:', err);
        }
      }
    }
  }, [episodeId, voices, onVoiceChange]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∑–≤—É—á–µ–∫
  const fetchVoices = async () => {
    try {
      setLoading(true);
      setError(null);

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
      const response = await axios.get(
        `https://aniliberty.top/api/v1/anime/releases/episodes/${episodeId}`
      );

      if (response.data) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∑–≤—É—á–∫–∞—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞
        const extractedVoices = extractVoicesFromEpisode(response.data);
        
        if (extractedVoices.length > 0) {
          setVoices(extractedVoices);
        } else {
          // –ï—Å–ª–∏ –æ–∑–≤—É—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
          console.warn('–û–∑–≤—É—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
          setVoices(FALLBACK_VOICES);
        }
      } else {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–ø–∏–∑–æ–¥–µ');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∑–≤—É—á–µ–∫:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–∑–≤—É—á–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setVoices(FALLBACK_VOICES);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–∑–≤—É—á–µ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞
  const extractVoicesFromEpisode = (episodeData) => {
    const voices = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –≤–∏–¥–µ–æ –∫–∞–∫ —Ä–∞–∑–Ω—ã—Ö –æ–∑–≤—É—á–µ–∫
    if (episodeData.hls_1080 || episodeData.video_1080) {
      voices.push({
        id: 'hq_voice',
        name: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        language: 'RU',
        type: 'dub',
        studio: 'AniLiberty',
        quality: 'high',
        url: episodeData.hls_1080 || episodeData.video_1080
      });
    }

    if (episodeData.hls_720 || episodeData.video_720) {
      voices.push({
        id: 'standard_voice',
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        language: 'RU',
        type: 'dub',
        studio: 'AniLiberty',
        quality: 'medium',
        url: episodeData.hls_720 || episodeData.video_720
      });
    }

    if (episodeData.hls_480 || episodeData.video_480) {
      voices.push({
        id: 'low_voice',
        name: '–ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        language: 'RU',
        type: 'dub',
        studio: 'AniLiberty',
        quality: 'low',
        url: episodeData.hls_480 || episodeData.video_480
      });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—É–±–ª—è–∂–µ/—Å—É–±—Ç–∏—Ç—Ä–∞—Ö
    if (episodeData.voices && Array.isArray(episodeData.voices)) {
      return episodeData.voices.map((voice, index) => ({
        id: voice.id || `voice_${index}`,
        name: voice.name || `–û–∑–≤—É—á–∫–∞ ${index + 1}`,
        language: voice.language || 'RU',
        type: voice.type || 'dub',
        studio: voice.studio || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        quality: voice.quality || 'medium'
      }));
    }

    return voices;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–∑–≤—É—á–∫–∏
  const handleVoiceSelect = (voice) => {
    if (disabled) return;

    onVoiceChange?.(voice);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤ localStorage
    try {
      localStorage.setItem(`voicePreference_${episodeId}`, JSON.stringify(voice));
    } catch (err) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –æ–∑–≤—É—á–∫–∏:', err);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –æ–∑–≤—É—á–∫–∏
  const getVoiceIcon = (voice) => {
    switch (voice.type) {
      case 'original':
        return 'üéå';
      case 'dub':
        return voice.language === 'RU' ? 'üá∑üá∫' : 'üé≠';
      case 'sub':
        return 'üìù';
      default:
        return 'üéµ';
    }
  };

  // –ï—Å–ª–∏ –Ω–µ—Ç episodeId, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!episodeId) {
    return null;
  }

  return (
    <VoiceSelectorContainer className={className} style={style}>
      <VoiceSelectorTitle>
        <span className="title-icon">üé§</span>
        –û–∑–≤—É—á–∫–∞
      </VoiceSelectorTitle>
      
      {loading && (
        <VoiceLoadingContainer>
          –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∑–≤—É—á–µ–∫...
        </VoiceLoadingContainer>
      )}

      {error && (
        <VoiceErrorContainer>
          {error}
        </VoiceErrorContainer>
      )}

      {!loading && voices.length > 0 && (
        <VoiceButtonsContainer>
          {voices.map((voice) => (
            <VoiceButton
              key={voice.id}
              active={selectedVoice && selectedVoice.id === voice.id}
              onClick={() => handleVoiceSelect(voice)}
              disabled={disabled}
              title={`${voice.name} (${voice.language}) - ${voice.studio}`}
            >
              <span className="voice-icon">{getVoiceIcon(voice)}</span>
              <span className="voice-name">{voice.name}</span>
            </VoiceButton>
          ))}
        </VoiceButtonsContainer>
      )}

      {!loading && voices.length === 0 && !error && (
        <VoiceLoadingContainer>
          –û–∑–≤—É—á–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        </VoiceLoadingContainer>
      )}
    </VoiceSelectorContainer>
  );
};

export default VoiceSelector;