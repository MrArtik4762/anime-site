import React, { useState, useEffect, useMemo } from 'react';
import { styled } from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '../../styles/GlobalStyles';

const FilterContainer = styled.div`
  background: ${props => props.theme.colors.surface};
  border: 1px solid ${props => props.theme.colors.border};
  border-radius: 12px;
  padding: 20px;
  width: 100%;
`;

const FilterHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 20px;
`;

const FilterTitle = styled.h3`
  font-size: 1.1rem;
  font-weight: 600;
  color: ${props => props.theme.colors.text};
  margin: 0;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const FilterIcon = styled.span`
  font-size: 1.2rem;
`;

const ToggleButton = styled.button`
  background: none;
  border: none;
  color: ${props => props.theme.colors.primary};
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  padding: 4px 8px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
  
  &:hover {
    background: ${props => props.theme.colors.surfaceSecondary};
  }
  
  @media (min-width: 769px) {
    display: none;
  }
`;

const FilterContent = styled(motion.div)`
  @media (max-width: 768px) {
    overflow: hidden;
  }
`;

const QuickFiltersSection = styled.div`
  margin-bottom: 24px;
`;

const QuickFiltersTitle = styled.h4`
  font-size: 0.9rem;
  font-weight: 600;
  color: ${props => props.theme.colors.text};
  margin: 0 0 12px 0;
`;

const QuickFiltersGrid = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
`;

const QuickFilterTag = styled.button`
  background: ${props => props.active ? props.theme.colors.primary : props.theme.colors.surfaceSecondary};
  color: ${props => props.active ? 'white' : props.theme.colors.text};
  border: 1px solid ${props => props.active ? props.theme.colors.primary : props.theme.colors.border};
  border-radius: 20px;
  padding: 6px 14px;
  font-size: 0.8rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:hover {
    background: ${props => props.active ? props.theme.colors.primaryDark : props.theme.colors.border};
  }
`;

const FilterGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 24px;
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    gap: 16px;
  }
`;

const FilterGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 10px;
`;

const FilterLabel = styled.label`
  font-size: 0.875rem;
  font-weight: 600;
  color: ${props => props.theme.colors.text};
  display: flex;
  align-items: center;
  gap: 8px;
`;

const FilterLabelIcon = styled.span`
  font-size: 1rem;
`;

const Select = styled.select`
  padding: 10px 12px;
  border: 1px solid ${props => props.theme.colors.border};
  border-radius: 8px;
  background: ${props => props.theme.colors.surface};
  color: ${props => props.theme.colors.text};
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:focus {
    outline: none;
    border-color: ${props => props.theme.colors.primary};
    box-shadow: 0 0 0 3px ${props => props.theme.colors.primary}20;
  }
  
  option {
    background: ${props => props.theme.colors.surface};
    color: ${props => props.theme.colors.text};
  }
`;

const CheckboxGroup = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  max-height: 120px;
  overflow-y: auto;
  padding: 2px;
  
  &::-webkit-scrollbar {
    width: 4px;
  }
  
  &::-webkit-scrollbar-track {
    background: ${props => props.theme.colors.surfaceSecondary};
    border-radius: 2px;
  }
  
  &::-webkit-scrollbar-thumb {
    background: ${props => props.theme.colors.primary};
    border-radius: 2px;
  }
`;

const CheckboxItem = styled.label`
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  background: ${props => props.checked ? props.theme.colors.primary : props.theme.colors.surfaceSecondary};
  color: ${props => props.checked ? 'white' : props.theme.colors.text};
  border-radius: 16px;
  font-size: 0.75rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  user-select: none;
  
  &:hover {
    background: ${props => props.checked ? props.theme.colors.primaryDark : props.theme.colors.border};
    transform: translateY(-1px);
  }
  
  input {
    display: none;
  }
`;

const RangeGroup = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
`;

const RangeInput = styled.input`
  flex: 1;
  padding: 8px 10px;
  border: 1px solid ${props => props.theme.colors.border};
  border-radius: 6px;
  background: ${props => props.theme.colors.surface};
  color: ${props => props.theme.colors.text};
  font-size: 0.875rem;
  text-align: center;
  
  &:focus {
    outline: none;
    border-color: ${props => props.theme.colors.primary};
    box-shadow: 0 0 0 3px ${props => props.theme.colors.primary}20;
  }
`;

const RangeSeparator = styled.span`
  color: ${props => props.theme.colors.textSecondary};
  font-weight: 500;
`;

const FilterActions = styled.div`
  display: flex;
  gap: 12px;
  justify-content: space-between;
  align-items: center;
  
  @media (max-width: 768px) {
    flex-direction: column;
    gap: 8px;
    
    .actions-left, .actions-right {
      display: flex;
      width: 100%;
      gap: 8px;
      
      button {
        flex: 1;
      }
    }
  }
`;

const ActiveFiltersCount = styled.div`
  background: ${props => props.theme.colors.primary};
  color: white;
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 4px;
`;

const SavedFiltersDropdown = styled.select`
  padding: 6px 10px;
  border: 1px solid ${props => props.theme.colors.border};
  border-radius: 6px;
  background: ${props => props.theme.colors.surface};
  color: ${props => props.theme.colors.text};
  font-size: 0.8rem;
`;

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ AniLiberty API
const ANIME_GENRES = [
  '–ë–æ–µ–≤–∏–∫–∏', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '–ö–æ–º–µ–¥–∏—è', '–î—Ä–∞–º–∞', '–§—ç–Ω—Ç–µ–∑–∏', '–£–∂–∞—Å—ã', '–ú–∞–≥–∏—è', '–ú–µ—Ö–∞',
  '–ú—É–∑—ã–∫–∞', '–ú–∏—Å—Ç–∏–∫–∞', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–†–æ–º–∞–Ω—Ç–∏–∫–∞', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–°—ë–¥–∑—ë', '–°—ë–Ω–µ–Ω',
  '–°–ø–æ—Ä—Ç', '–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ', '–¢—Ä–∏–ª–ª–µ—Ä', '–®–∫–æ–ª–∞', '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å', '–ò—Å—ç–∫–∞–π',
  '–ü–∞—Ä–æ–¥–∏—è', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–í–æ–µ–Ω–Ω—ã–µ', '–°–∞–º—É—Ä–∞–∏', '–í–∞–º–ø–∏—Ä—ã', '–ò–≥—Ä—ã', '–î–µ–º–æ–Ω—ã',
  '–≠–∫—à–µ–Ω', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã', '–°—ç–π–Ω—ç–Ω', '–î–∑—ë—Å—ç–π'
];

const ANIME_TYPES = [
  { value: 'tv', label: 'üì∫ –¢–í-—Å–µ—Ä–∏–∞–ª', icon: 'üì∫' },
  { value: 'movie', label: 'üé¨ –§–∏–ª—å–º', icon: 'üé¨' },
  { value: 'ova', label: 'üíø OVA', icon: 'üíø' },
  { value: 'ona', label: 'üåê ONA', icon: 'üåê' },
  { value: 'special', label: '‚≠ê –°–ø–µ—Ü–≤—ã–ø—É—Å–∫', icon: '‚≠ê' },
  { value: 'music', label: 'üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ', icon: 'üéµ' }
];

const ANIME_STATUSES = [
  { value: 'ongoing', label: 'üîÑ –û–Ω–≥–æ–∏–Ω–≥', icon: 'üîÑ' },
  { value: 'completed', label: '‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω', icon: '‚úÖ' },
  { value: 'upcoming', label: 'üîú –ê–Ω–æ–Ω—Å', icon: 'üîú' },
  { value: 'paused', label: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', icon: '‚è∏Ô∏è' }
];

const SORT_OPTIONS = [
  { value: 'rating-desc', label: '‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É ‚Üì', icon: '‚≠ê' },
  { value: 'rating-asc', label: '‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É ‚Üë', icon: '‚≠ê' },
  { value: 'year-desc', label: 'üìÖ –ü–æ –≥–æ–¥—É ‚Üì', icon: 'üìÖ' },
  { value: 'year-asc', label: 'üìÖ –ü–æ –≥–æ–¥—É ‚Üë', icon: 'üìÖ' },
  { value: 'popularity-desc', label: 'üî• –ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ‚Üì', icon: 'üî•' },
  { value: 'popularity-asc', label: 'üî• –ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ‚Üë', icon: 'üî•' },
  { value: 'date-desc', label: 'üÜï –ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Üì', icon: 'üÜï' },
  { value: 'date-asc', label: 'üÜï –ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Üë', icon: 'üÜï' },
  { value: 'episodes-desc', label: 'üì∫ –ü–æ —Å–µ—Ä—ñ—è–º ‚Üì', icon: 'üì∫' },
  { value: 'episodes-asc', label: 'üì∫ –ü–æ —Å–µ—Ä—ñ—è–º ‚Üë', icon: 'üì∫' },
  { value: 'title-asc', label: 'üî§ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é ‚Üë', icon: 'üî§' },
  { value: 'title-desc', label: 'üî§ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é ‚Üì', icon: 'üî§' }
];

const QUICK_FILTERS = [
  { key: 'popular', label: 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ', filter: { sortBy: 'popularity', sortOrder: 'desc' } },
  { key: 'new', label: 'üÜï –ù–æ–≤–∏–Ω–∫–∏', filter: { sortBy: 'date', sortOrder: 'desc' } },
  { key: 'top_rated', label: '‚≠ê –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞', filter: { ratingFrom: '8.0', sortBy: 'rating', sortOrder: 'desc' } },
  { key: 'ongoing', label: 'üîÑ –û–Ω–≥–æ–∏–Ω–≥–∏', filter: { status: 'ongoing' } },
  { key: 'completed', label: '‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ', filter: { status: 'completed' } },
  { key: 'movies', label: 'üé¨ –§–∏–ª—å–º—ã', filter: { type: 'movie' } },
  { key: 'short', label: '‚ö° –ö–æ—Ä–æ—Ç–∫–∏–µ', filter: { episodesTo: '12' } },
  { key: 'long', label: 'üìö –î–ª–∏–Ω–Ω—ã–µ', filter: { episodesFrom: '25' } }
];

const AdvancedFilterPanel = ({ filters, onFilterChange, resultCount = 0 }) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [savedFilters, setSavedFilters] = useState([]);
  const [localFilters, setLocalFilters] = useState({
    genre: [],
    type: '',
    year: '',
    yearFrom: '',
    yearTo: '',
    status: '',
    rating: '',
    ratingFrom: '',
    ratingTo: '',
    episodes: '',
    episodesFrom: '',
    episodesTo: '',
    sortBy: 'rating',
    sortOrder: 'desc',
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    language: 'ru',
    voice: 'ru',
    ...filters,
  });

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ localStorage
    const saved = JSON.parse(localStorage.getItem('savedAnimeFilters') || '[]');
    setSavedFilters(saved);
  }, []);

  const activeFiltersCount = useMemo(() => {
    return Object.values(localFilters).filter(value => {
      if (Array.isArray(value)) return value.length > 0;
      return value !== '' && value !== undefined && value !== null;
    }).length;
  }, [localFilters]);

  const handleFilterChange = (key, value) => {
    const newFilters = { ...localFilters, [key]: value };
    setLocalFilters(newFilters);
  };

  const handleGenreToggle = (genre) => {
    const currentGenres = localFilters.genre || [];
    const newGenres = currentGenres.includes(genre)
      ? currentGenres.filter(g => g !== genre)
      : [...currentGenres, genre];
    handleFilterChange('genre', newGenres);
  };

  const handleQuickFilter = (quickFilter) => {
    const newFilters = { ...localFilters, ...quickFilter.filter };
    setLocalFilters(newFilters);
    onFilterChange(newFilters);
  };

  const applyFilters = () => {
    onFilterChange(localFilters);
  };

  const resetFilters = () => {
    const resetFilters = {
      genre: [],
      type: '',
      year: '',
      yearFrom: '',
      yearTo: '',
      status: '',
      rating: '',
      ratingFrom: '',
      ratingTo: '',
      episodes: '',
      episodesFrom: '',
      episodesTo: '',
      sortBy: 'rating',
      sortOrder: 'desc',
      // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –ø—Ä–∏ —Å–±—Ä–æ—Å–µ
      language: 'ru',
      voice: 'ru'
    };
    setLocalFilters(resetFilters);
    onFilterChange(resetFilters);
  };

  const saveCurrentFilters = () => {
    if (activeFiltersCount === 0) return;
    
    const filterName = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:');
    if (!filterName) return;

    const newSavedFilter = {
      id: Date.now(),
      name: filterName,
      filters: { ...localFilters },
      createdAt: new Date().toISOString()
    };

    const updated = [...savedFilters, newSavedFilter];
    setSavedFilters(updated);
    localStorage.setItem('savedAnimeFilters', JSON.stringify(updated));
  };

  const loadSavedFilters = (filterId) => {
    if (!filterId) return;
    
    const savedFilter = savedFilters.find(f => f.id === parseInt(filterId));
    if (savedFilter) {
      setLocalFilters(savedFilter.filters);
      onFilterChange(savedFilter.filters);
    }
  };

  const currentYear = new Date().getFullYear();
  const years = Array.from({ length: currentYear - 1960 + 1 }, (_, i) => currentYear - i);

  return (
    <FilterContainer>
      <FilterHeader>
        <FilterTitle>
          <FilterIcon>üéõÔ∏è</FilterIcon>
          –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
          {activeFiltersCount > 0 && (
            <ActiveFiltersCount>
              <span>üéØ</span>
              {activeFiltersCount}
            </ActiveFiltersCount>
          )}
        </FilterTitle>
        <ToggleButton onClick={() => setIsExpanded(!isExpanded)}>
          {isExpanded ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}
        </ToggleButton>
      </FilterHeader>

      <AnimatePresence>
        {isExpanded && (
          <FilterContent
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            <QuickFiltersSection>
              <QuickFiltersTitle>‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</QuickFiltersTitle>
              <QuickFiltersGrid>
                {QUICK_FILTERS.map((quickFilter) => (
                  <QuickFilterTag
                    key={quickFilter.key}
                    onClick={() => handleQuickFilter(quickFilter)}
                  >
                    {quickFilter.label}
                  </QuickFilterTag>
                ))}
              </QuickFiltersGrid>
            </QuickFiltersSection>

            <FilterGrid>
              <FilterGroup>
                <FilterLabel>
                  <FilterLabelIcon>üìä</FilterLabelIcon>
                  –°—Ç–∞—Ç—É—Å
                </FilterLabel>
                <Select
                  value={localFilters.status}
                  onChange={(e) => handleFilterChange('status', e.target.value)}
                >
                  <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                  {ANIME_STATUSES.map(status => (
                    <option key={status.value} value={status.value}>
                      {status.label}
                    </option>
                  ))}
                </Select>
              </FilterGroup>

              <FilterGroup>
                <FilterLabel>
                  <FilterLabelIcon>üé¨</FilterLabelIcon>
                  –¢–∏–ø
                </FilterLabel>
                <Select
                  value={localFilters.type}
                  onChange={(e) => handleFilterChange('type', e.target.value)}
                >
                  <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                  {ANIME_TYPES.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.label}
                    </option>
                  ))}
                </Select>
              </FilterGroup>

              <FilterGroup>
                <FilterLabel>
                  <FilterLabelIcon>üìÖ</FilterLabelIcon>
                  –ì–æ–¥
                </FilterLabel>
                <Select
                  value={localFilters.year}
                  onChange={(e) => handleFilterChange('year', e.target.value)}
                >
                  <option value="">–õ—é–±–æ–π –≥–æ–¥</option>
                  {years.map(year => (
                    <option key={year} value={year}>{year}</option>
                  ))}
                </Select>
              </FilterGroup>

              <FilterGroup>
                <FilterLabel>
                  <FilterLabelIcon>üîÑ</FilterLabelIcon>
                  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                </FilterLabel>
                <Select
                  value={`${localFilters.sortBy}-${localFilters.sortOrder}`}
                  onChange={(e) => {
                    const [sortBy, sortOrder] = e.target.value.split('-');
                    handleFilterChange('sortBy', sortBy);
                    handleFilterChange('sortOrder', sortOrder);
                  }}
                >
                  {SORT_OPTIONS.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </Select>
              </FilterGroup>
            </FilterGrid>

            <FilterGrid>
              <FilterGroup>
                <FilterLabel>
                  <FilterLabelIcon>‚≠ê</FilterLabelIcon>
                  –†–µ–π—Ç–∏–Ω–≥
                </FilterLabel>
                <RangeGroup>
                  <RangeInput
                    type="number"
                    min="0"
                    max="10"
                    step="0.1"
                    placeholder="–û—Ç"
                    value={localFilters.ratingFrom}
                    onChange={(e) => handleFilterChange('ratingFrom', e.target.value)}
                  />
                  <RangeSeparator>‚Äî</RangeSeparator>
                  <RangeInput
                    type="number"
                    min="0"
                    max="10"
                    step="0.1"
                    placeholder="–î–æ"
                    value={localFilters.ratingTo}
                    onChange={(e) => handleFilterChange('ratingTo', e.target.value)}
                  />
                </RangeGroup>
              </FilterGroup>

              <FilterGroup>
                <FilterLabel>
                  <FilterLabelIcon>üì∫</FilterLabelIcon>
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
                </FilterLabel>
                <RangeGroup>
                  <RangeInput
                    type="number"
                    min="1"
                    placeholder="–û—Ç"
                    value={localFilters.episodesFrom}
                    onChange={(e) => handleFilterChange('episodesFrom', e.target.value)}
                  />
                  <RangeSeparator>‚Äî</RangeSeparator>
                  <RangeInput
                    type="number"
                    min="1"
                    placeholder="–î–æ"
                    value={localFilters.episodesTo}
                    onChange={(e) => handleFilterChange('episodesTo', e.target.value)}
                  />
                </RangeGroup>
              </FilterGroup>

              <FilterGroup>
                <FilterLabel>
                  <FilterLabelIcon>üìÖ</FilterLabelIcon>
                  –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç
                </FilterLabel>
                <RangeGroup>
                  <RangeInput
                    type="number"
                    min="1960"
                    max={currentYear}
                    placeholder="–û—Ç"
                    value={localFilters.yearFrom}
                    onChange={(e) => handleFilterChange('yearFrom', e.target.value)}
                  />
                  <RangeSeparator>‚Äî</RangeSeparator>
                  <RangeInput
                    type="number"
                    min="1960"
                    max={currentYear}
                    placeholder="–î–æ"
                    value={localFilters.yearTo}
                    onChange={(e) => handleFilterChange('yearTo', e.target.value)}
                  />
                </RangeGroup>
              </FilterGroup>
            </FilterGrid>

            <FilterGroup>
              <FilterLabel>
                <FilterLabelIcon>üé≠</FilterLabelIcon>
                –ñ–∞–Ω—Ä—ã ({localFilters.genre?.length || 0} –≤—ã–±—Ä–∞–Ω–æ)
              </FilterLabel>
              <CheckboxGroup>
                {ANIME_GENRES.map((genre) => (
                  <CheckboxItem
                    key={genre}
                    checked={localFilters.genre?.includes(genre)}
                  >
                    <input
                      type="checkbox"
                      checked={localFilters.genre?.includes(genre)}
                      onChange={() => handleGenreToggle(genre)}
                    />
                    {genre}
                  </CheckboxItem>
                ))}
              </CheckboxGroup>
            </FilterGroup>

            <FilterActions>
              <div className="actions-left">
                {savedFilters.length > 0 && (
                  <SavedFiltersDropdown
                    onChange={(e) => loadSavedFilters(e.target.value)}
                    value=""
                  >
                    <option value="">üíæ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ</option>
                    {savedFilters.map(filter => (
                      <option key={filter.id} value={filter.id}>
                        {filter.name}
                      </option>
                    ))}
                  </SavedFiltersDropdown>
                )}
                {activeFiltersCount > 0 && (
                  <Button variant="outline" size="small" onClick={saveCurrentFilters}>
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </Button>
                )}
                <Button variant="outline" onClick={resetFilters}>
                  üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                </Button>
              </div>
              
              <div className="actions-right">
                <Button onClick={applyFilters}>
                  üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å ({resultCount})
                </Button>
              </div>
            </FilterActions>
          </FilterContent>
        )}
      </AnimatePresence>
    </FilterContainer>
  );
};

export default AdvancedFilterPanel;