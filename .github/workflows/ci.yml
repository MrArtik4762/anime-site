name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality Checks - выполняется на всех PR и push
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          cd server && npm ci
          cd ../client && npm ci

      - name: Run ESLint
        run: |
          cd server && npm run lint
          cd ../client && npm run lint

      - name: Check code formatting
        run: |
          cd server && npx prettier --check .
          cd ../client && npx prettier --check .


      - name: Check for security vulnerabilities
        run: |
          cd server && npm audit --audit-level moderate
          cd ../client && npm audit --audit-level moderate

      - name: Check for sensitive data
        run: |
          npx git-secrets --scan

      - name: Check if should deploy
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Unit and Integration Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    if: needs.quality-checks.outputs.should-deploy == 'true'
    strategy:
      matrix:
        node-version: [18.x]
        service: [postgres, redis]
      fail-fast: false

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: anime_test_user
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_TEST_PASSWORD }}
          POSTGRES_DB: anime_test_db
          POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install server dependencies
        run: |
          cd server
          npm ci
        env:
          NODE_ENV: test

      - name: Install client dependencies
        run: |
          cd client
          npm ci

      - name: Run server unit tests
        run: |
          cd server && npm run test
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://anime_test_user:${{ secrets.POSTGRES_TEST_PASSWORD }}@localhost:5432/anime_test_db"
          REDIS_URL: "redis://:${{ secrets.REDIS_TEST_PASSWORD }}@localhost:6379"
          ANILIBERTY_API_BASE: "https://anilibria.top/api"
          JWT_SECRET: ${{ secrets.JWT_TEST_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_TEST_SECRET }}

      - name: Run server integration tests
        run: |
          cd server && npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://anime_test_user:${{ secrets.POSTGRES_TEST_PASSWORD }}@localhost:5432/anime_test_db"
          REDIS_URL: "redis://:${{ secrets.REDIS_TEST_PASSWORD }}@localhost:6379"
          JWT_SECRET: ${{ secrets.JWT_TEST_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_TEST_SECRET }}

      - name: Run client unit tests
        run: |
          cd client && npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload server coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: server-unittests
          name: codecov-server
          fail_ci_if_error: false

      - name: Upload client coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: client-unittests
          name: codecov-client
          fail_ci_if_error: false

  # Test Docker Compose Configuration
  test-compose:
    name: Test Docker Compose Configuration
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    if: needs.quality-checks.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test original docker-compose configuration
        run: |
          echo "Testing original docker-compose configuration..."
          docker-compose config -q
          echo "✅ Original docker-compose configuration is valid"

      - name: Test improved docker-compose configuration
        run: |
          echo "Testing improved docker-compose configuration..."
          docker-compose -f docker-compose.yml -f docker-compose-improved.yml config -q
          echo "✅ Improved docker-compose configuration is valid"

      - name: Test environment variables validation
        run: |
          echo "Testing environment variables validation..."
          # Проверка обязательных переменных в improved конфигурации
          required_vars=("POSTGRES_PASSWORD" "REDIS_PASSWORD" "JWT_SECRET" "JWT_REFRESH_SECRET")
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "❌ Required environment variable $var is not set"
              exit 1
            fi
          done
          echo "✅ All required environment variables are set"

      - name: Test service health checks
        run: |
          echo "Testing service health checks configuration..."
          docker-compose -f docker-compose.yml -f docker-compose-improved.yml config | grep -E "(healthcheck|start_period)"
          echo "✅ Health checks are properly configured"

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, test-compose]
    if: needs.quality-checks.outputs.should-deploy == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging,enable={{is_branch_staging}}
            type=raw,value=production,enable={{is_branch_main}}

      - name: Build and push server Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./server/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push client Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./client/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}-client
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        id: deploy
        run: |
          echo "Deploying to staging..."
          # Здесь можно добавить команды для деплоя на staging сервер
          # Например, через SSH или использование ansible
          echo "deployment-url=https://staging.anime-site.com" >> $GITHUB_OUTPUT

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        id: deploy
        run: |
          echo "Deploying to production..."
          # Здесь можно добавить команды для деплоя на production сервер
          # Например, через SSH или использование ansible
          echo "deployment-url=https://anime-site.com" >> $GITHUB_OUTPUT

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Run health check
        run: |
          echo "Running health checks..."
          # Здесь можно добавить проверки здоровья приложения
          # Например, curl запросы к эндпоинтам
          echo "Health check completed"

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, build, deploy-staging, deploy-production, health-check]
    if: always()
    steps:
      - name: Send success notification
        if: success()
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"

      - name: Send failure notification
        if: failure()
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"