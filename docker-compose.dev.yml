services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15.5-alpine3.18
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-anime_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-anime_site_db}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
      - ./server/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-anime} -d ${POSTGRES_DB:-anime_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - anime-network

  # Node.js Backend для разработки
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: base
    image: anime-site-server:dev
    container_name: anime-site-server-dev
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - ./shared:/app/shared
      - ./server/uploads:/app/uploads
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://anime_user:@postgres:5432/anime_site_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=
      - JWT_EXPIRE=30d
      - JWT_REFRESH_SECRET=
      - JWT_REFRESH_EXPIRE=7d
      - CLIENT_URL=http://localhost:3000
      - SOCKET_CORS_ORIGIN=http://localhost:3000
      - CHOKIDAR_USEPOLLING=true
      - ANILIBERTY_API_BASE=${ANILIBERTY_API_BASE:-"https://anilibria.top/api"}
      - PROXY_WHITELIST=${PROXY_WHITELIST:-"anilibria.top,anilibria.cc,cdn.anilibria.tv"}
      - CORS_ALLOW_ORIGIN=${CORS_ALLOW_ORIGIN:-"*"}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - anime-network
    command: node server.js
    init: true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25.3-alpine3.18
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - client
      - server
    networks:
      - anime-network

  # React Frontend для разработки
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: build
    image: anime-site-client:dev
    container_name: anime-site-client-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=false
      - REACT_APP_API_URL=http://localhost:8080
    depends_on:
      - nginx
    networks:
      - anime-network
    command: npm start
    init: true
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для кеширования и сессий
  redis:
    image: redis:7.2.3-alpine3.18
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redisdata_dev:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - anime-network

# Тома для разработки
volumes:
  pgdata_dev:
    driver: local
  redisdata_dev:
    driver: local

# Сеть для разработки
networks:
  anime-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16